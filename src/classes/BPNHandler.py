#! /usr/bin/python -W ignore::FutureWarning
from classes.BackPropagationNetwork import *
from classes.Dataset import *
from classes.LightDataset import *
from classes.LiveDataset import *
from classes.Settings import *
import utils, hand
import numpy as np
import sys, math
import scipy.stats, scipy.ndimage
import cv2
from copy import deepcopy
import time
import signal
import heapq


class BPNHandler():
	
	# Load settings
	settings = Settings()
	
	# Hold all input feature data
	trainingInput, testingInput, validatingInput = [], [], []
	
	# Hold all target data
	trainingTarget, testingTarget = [], []
	
	# Hold eventual results
	resultTestingScore, resultTrainingScore, resultInitialWeights, resultWeights, resultConfig, resultIteration = [], [], [], [], [], []
	
	# Hold informations about the current input
	currentH, currentW = 0, 0
	currentBinary, currentExtracted = [], []
	
	# Hold the transformations applied to the current input
	cropTop, cropLeft, cropBottom, cropRight = 0, 0, 0, 0
	emptyTop, emptyLeft, emptyBottom, emptyRight = 0, 0, 0, 0
	rotationAngle = 0
	tar = 0
	
	# The current fingertip (if any)
	fingerTip = [[0,0], [0,0]]
	eyePosition = [[0,0], [0,0]]
	
	count = 0
	
	bpnValidating = None
	
	def __init__(self, live=False, features=6, hiddenLayers=15, output=4):
		# Define the functions that will be used
		lFuncs = [None, gaussian, sgm]
		
		# Initialise the right network
		if live:
			self.bpnValidating = BackPropagationNetwork((features, hiddenLayers, output), lFuncs)
			self.bpnValidating.setWeights(self.getRestrainedNewWeights())
		else:
			self.bpnTesting = BackPropagationNetwork((features, hiddenLayers, output), lFuncs)
		
		# Vectorize threshold functions to speed the process
		self.thresholdBinary = np.vectorize(self.thresholdBinary)
		self.thresholdExtracted = np.vectorize(self.thresholdExtracted)
	
	def thresholdBinary(self, x, start, end):
	    return 0 if x<start or x>end or x==0 else 1
	
	def thresholdExtracted(self, x, start, end):
	    return np.NaN if x<start or x>end or x==0 else x
	
	def loadPositive(self, type, positive, target, light=True):
		print "Loading positive {0} data".format(type)
		
		for i in range(len(positive)):
			for j in positive[i]:
				name = j.split("/")
				print("Loading positive: {0}/{1}/{2}".format(name[-3], name[-2], name[-1]))
				data = utils.loadJsonFromFile(str(j))
				
				if type=="training":
					if light:
						self.trainingInput.append(self.getFeaturesLight(data))
					else:
						self.trainingInput.append(self.getFeaturesFull(data))
					self.trainingTarget.append(target[i])
				elif type=="testing":
					if light:
						self.testingInput.append(self.getFeaturesLight(data))
					else:
						self.testingInput.append(self.getFeaturesFull(data))
					self.testingTarget.append(target[i])
				elif type=="validating":
					self.validatingInput.append(data)
				else:
					raise "Invalid type of data", type
				
				self.count += 1
		
		if type=="validating":
			return self.validatingInput
	
	def loadNegative(self, type, negative, targetLength, light=True):
		print "Loading negative {0} data".format(type)
		
		# Create the negative target thanks to the lenth of the positive one
		negativeTarget = np.zeros(targetLength).astype(int)
		
		for i in negative:
			name = i.split("/")
			print("Loading negative: {0}/{1}/{2}".format(name[-3], name[-2], name[-1]))
			data = utils.loadJsonFromFile(str(i))
			
			if type=="training":
				if light:
					self.trainingInput.append(self.getFeaturesLight(data))
				else:
					self.trainingInput.append(self.getFeaturesFull(data))
				self.trainingTarget.append(negativeTarget)
			elif type=="testing":
				if light:
					self.testingInput.append(self.getFeaturesLight(data))
				else:
					self.testingInput.append(self.getFeaturesFull(data))
				self.testingTarget.append(negativeTarget)
			elif type=="validating":
				self.validatingInput.append(data)
			else:
				raise "Invalid type of data", type
			
			self.count += 1
		
		if type=="validating":
			return self.validatingInput
	
	def unload(self):
		self.trainingInput = []
		self.testingInput = []
		self.validatingInput = []
		
		self.trainingTarget = []
		self.testingTarget = []
	
	def loadNewDataRestrainedMixedFeatures(self):
		self.trainingInput = np.array([
			[-0.957753240518,-0.583293326932,-0.275084013442,-0.595775324052,-0.605376860298,-0.982717234758],
			[-0.995729537367,-0.591459074733,-0.281138790036,-0.71103202847,-0.555871886121,-0.864768683274],
			[-0.95975565936,-0.617678763924,-0.401365432986,-0.664390945023,-0.497664390945,-0.859144807761],
			[-0.906976744186,-0.573871409029,-0.34610123119,-0.645690834473,-0.580027359781,-0.947332421341],
			[-0.699041267195,-0.302209253856,-0.852438516048,-1.0,-0.821592330138,-0.324718632764],
			[-0.953565505804,-0.653399668325,-0.300165837479,-0.599502487562,-0.56135986733,-0.932006633499],
			[-0.978039215686,-0.638431372549,-0.27137254902,-0.621176470588,-0.55137254902,-0.939607843137],
			[-0.868372943327,-0.586837294333,-0.352833638026,-0.620658135283,-0.604204753199,-0.967093235832],
			[-0.870759289176,-0.511039310716,-0.366720516963,-0.685514270328,-0.586429725363,-0.979536887453],
			[-0.897332662305,-0.53598389532,-0.559134373427,-0.68495218923,-0.622546552592,-0.700050327126],
			[-0.950629722922,-0.545591939547,-0.557682619647,-0.705793450882,-0.566750629723,-0.67355163728],
			[-1.0,-0.721428571429,-0.433928571429,-0.748214285714,-0.573214285714,-0.523214285714],
			[-1.0,-0.817629179331,-0.412360688956,-0.758865248227,-0.570415400203,-0.440729483283],
			[-1.0,-0.647660818713,-0.558479532164,-0.776315789474,-0.519005847953,-0.498538011696],
			[-0.985100788782,-0.605609114812,-0.555652936021,-0.711656441718,-0.524101665206,-0.617879053462],
			[-0.952301719357,-0.534109816972,-0.694952856351,-0.749306711037,-0.542983915696,-0.526344980588],
			[-0.93916755603,-0.569903948773,-0.704375667022,-0.744930629669,-0.513340448239,-0.528281750267],
			[-0.926236378877,-0.590108968986,-0.773679798826,-0.68231349539,-0.546521374686,-0.481139983236],
			[-0.928664636799,-0.587646802958,-0.707698999565,-0.688560243584,-0.552849064811,-0.534580252284],
			[-1.0,-0.57962529274,-0.559718969555,-0.759953161593,-0.55737704918,-0.543325526932],
			[-0.99889135255,-0.635254988914,-0.592017738359,-0.741685144124,-0.531042128603,-0.50110864745],
			[-0.586060348491,-0.324266893328,-0.862303442414,-1.0,-0.891202719932,-0.336166595835],
			[-0.598117647059,-0.296,-0.848470588235,-1.0,-0.872,-0.385411764706],
			[-0.653196930946,-0.273657289003,-0.838363171355,-1.0,-0.884398976982,-0.350383631714],
			[-0.732954545455,-0.275568181818,-0.600852272727,-1.0,-0.938920454545,-0.451704545455],
			[-0.740296400847,-0.298517995766,-0.580804516584,-1.0,-0.90684544813,-0.473535638673],
			[-0.741988496302,-0.423171733772,-0.57107641742,-1.0,-0.806080525883,-0.457682826623],
			[-0.732615522656,-0.212202781516,-0.851054284432,-1.0,-0.850157021086,-0.35397039031],
			[-0.659983291562,-0.292397660819,-0.910609857978,-1.0,-0.835421888053,-0.301587301587],
			[-0.645982498011,-0.376292760541,-0.838504375497,-0.978520286396,-0.761336515513,-0.399363564041],
			[-0.666168410563,-0.198804185351,-0.895366218236,-1.0,-0.873442949676,-0.366218236173],
			[-0.780721790772,-0.243490178164,-0.629054362723,-1.0,-0.929648241206,-0.417085427136],
			[-0.746951219512,-0.317073170732,-0.631097560976,-1.0,-0.899390243902,-0.405487804878],
			[-0.676133532636,-0.673143996014,-0.872446437469,-0.998006975585,-0.460886895864,-0.319382162431],
			[-0.718837863168,-0.629803186504,-0.855670103093,-1.0,-0.482661668229,-0.313027179007],
			[-0.987376725838,-0.63550295858,-0.299408284024,-0.632347140039,-0.455621301775,-0.989743589744],
			[-0.929987608426,-0.396530359356,-0.395291201983,-0.741635687732,-0.614002478315,-0.922552664188],
			[-0.963349131122,-0.375671406003,-0.429383886256,-0.742812006319,-0.574091627172,-0.914691943128],
			[-0.649754500818,-0.427168576105,-0.882160392799,-0.973813420622,-0.603927986907,-0.46317512275],
			[-0.99043062201,-0.474420316526,-0.277143908723,-0.748987854251,-0.542142068458,-0.966875230033],
			[-0.953656770456,-0.404055032585,-0.292541636495,-0.737871107893,-0.630702389573,-0.981173062998],
			[-1.0,-0.408330366679,-0.24955500178,-0.755072979708,-0.693129227483,-0.89391242435],
			[-0.983570646221,-0.625410733844,-0.654983570646,-0.703176341731,-0.510405257393,-0.522453450164],
			[-1.0,-0.624505928854,-0.518577075099,-0.698814229249,-0.517786561265,-0.640316205534],
			[-0.994455445545,-0.588118811881,-0.527920792079,-0.682376237624,-0.533465346535,-0.673663366337],
			[-0.983739837398,-0.576461478901,-0.543941153697,-0.665505226481,-0.559427022842,-0.670925280681],
			[-1.0,-0.540089801155,-0.667094291212,-0.72674791533,-0.447081462476,-0.618986529827],
			[-0.935821872954,-0.512770137525,-0.779960707269,-0.721021611002,-0.516699410609,-0.533726260642],
			[-0.968981793661,-0.581928523264,-0.741065407957,-0.770734996628,-0.545515846258,-0.391773432232],
			[-0.939513477975,-0.512163050625,-0.737015121631,-0.804076265615,-0.568704799474,-0.438527284681],
			[-1.0,-0.605914972274,-0.689463955638,-0.718299445471,-0.488354898336,-0.497966728281],
			[-1.0,-0.733382570162,-0.498522895126,-0.710487444609,-0.525110782866,-0.532496307238],
			[-1.0,-0.76402461093,-0.533840028954,-0.664133188563,-0.541078537821,-0.496923633731],
			[-0.707276507277,-0.318918918919,-0.95841995842,-1.0,-0.782120582121,-0.233264033264],
			[-0.663149667839,-0.345838218054,-0.981242672919,-1.0,-0.752246971473,-0.257522469715],
			[-0.769716088328,-0.352260778128,-0.453207150368,-0.640378548896,-0.78443743428,-1.0],
			[-0.709254402398,-0.301611090296,-0.793930310978,-1.0,-0.826901461221,-0.368302735107],
			[-0.707738542449,-0.30803906837,-0.784372652141,-0.999248685199,-0.812171299775,-0.388429752066],
			[-1.0,-0.55459057072,-0.302109181141,-0.699131513648,-0.539081885856,-0.905086848635],
			[-0.542331881955,-0.747460087083,-1.0,-0.894533139816,-0.44847605225,-0.367198838897],
			[-0.716195685202,-0.59708295351,-0.960498328775,-0.948951686418,-0.407474931632,-0.369796414464],
			[-0.719892952721,-0.578352661314,-0.947071067499,-0.963722866488,-0.4272970562,-0.363663395778],
			[-1.0,-0.720930232558,-0.560723514212,-0.74677002584,-0.416020671835,-0.555555555556],
			[-0.749037721324,-0.6805234796,-0.945342571209,-0.990762124711,-0.403387220939,-0.230946882217],
			[-0.73474369406,-0.615134255492,-0.925956061839,-0.989422294548,-0.443449959317,-0.291293734744],
			[-0.998344370861,-0.495033112583,-0.326158940397,-0.69701986755,-0.669701986755,-0.813741721854],
			[-0.995791245791,-0.521885521886,-0.267676767677,-0.706228956229,-0.691077441077,-0.81734006734],
			[-0.766074313409,-0.568336025848,-0.452019386107,-1.0,-0.506300484653,-0.707269789984],
			[-0.733897202342,-0.517891997398,-0.443721535459,-1.0,-0.540013012362,-0.76447625244],
			[-0.668161434978,-0.520819987188,-0.78731582319,-0.989750160154,-0.467008327995,-0.566944266496],
			[-0.664811379097,-0.552257266543,-0.814471243043,-0.978973407545,-0.460729746444,-0.528756957328],
			[-0.721952796638,-0.482056256062,-0.662463627546,-0.979308115099,-0.533785968316,-0.62043323634],
			[-0.821714285714,-0.569142857143,-0.491428571429,-0.738285714286,-0.465142857143,-0.914285714286],
			[-0.807884508606,-0.594669627984,-0.499167129373,-0.710161021655,-0.475846751805,-0.912270960577],
			[-0.758649093904,-0.50823723229,-0.496705107084,-1.0,-0.607907742998,-0.628500823723],
			[-0.754709418838,-0.563927855711,-0.47254509018,-1.0,-0.56873747495,-0.640080160321],
			[-0.752081406105,-0.507863089732,-0.540240518039,-1.0,-0.695652173913,-0.504162812211],
			[-1.0,-0.786018237082,-0.376899696049,-0.665653495441,-0.316717325228,-0.854711246201],
			[-1.0,-0.871024734982,-0.398115429918,-0.706124852768,-0.2308598351,-0.793875147232],
			[-1.0,-0.844298245614,-0.34649122807,-0.637061403509,-0.313596491228,-0.858552631579],
			[-0.639503507825,-0.666486778198,-0.977334052887,-0.803561791689,-0.472207231516,-0.440906637885],
			[-1.0,-0.811246559182,-0.36846244593,-0.723161620134,-0.307904050334,-0.78922532442],
			[-1.0,-0.853451600463,-0.323563440031,-0.725414577709,-0.300424219051,-0.797146162746],
			[-1.0,-0.724315068493,-0.420376712329,-0.726883561644,-0.458047945205,-0.670376712329],
			[-0.999154334038,-0.736152219873,-0.3911205074,-0.731923890063,-0.523044397463,-0.618604651163],
			[-0.488704819277,-0.67093373494,-0.985692771084,-0.917168674699,-0.584337349398,-0.353162650602],
			[-0.471901462664,-0.729792147806,-0.994611239415,-0.886836027714,-0.555812163202,-0.361046959199],
			[-0.625502008032,-0.660642570281,-0.988955823293,-0.908634538153,-0.489959839357,-0.326305220884],
			[-0.637274549098,-0.673346693387,-0.976953907816,-0.902805611222,-0.507014028056,-0.302605210421],
			[-0.613787700744,-0.537015276146,-0.908343125734,-0.956130043087,-0.623188405797,-0.361535448492],
			[-0.550510783201,-0.558456299659,-0.799091940976,-0.895573212259,-0.77866061294,-0.417707150965],
			[-0.547984099943,-0.541169789892,-0.798977853492,-0.892106757524,-0.776263486655,-0.443498012493],
			[-0.595584988962,-0.58587196468,-0.94701986755,-0.97174392936,-0.594701986755,-0.305077262693],
			[-0.573131094258,-0.659804983749,-0.966413867822,-0.943661971831,-0.524377031419,-0.332611050921],
			[-0.748054474708,-0.639105058366,-0.559338521401,-0.876459143969,-0.530155642023,-0.646887159533],
			[-0.747417840376,-0.616901408451,-0.572769953052,-0.870422535211,-0.531455399061,-0.66103286385],
			[-0.729957805907,-0.548523206751,-0.541490857947,-0.995780590717,-0.582278481013,-0.601969057665],
			[-0.707495429616,-0.563985374771,-0.719378427788,-0.912248628885,-0.569469835466,-0.527422303473],
			[-0.708547407753,-0.552545539468,-0.692666978048,-0.944885567492,-0.597384399813,-0.503970107426],
			[-0.739276703112,-0.603027754415,-0.465096719933,-0.848612279226,-0.490328006728,-0.853658536585],
			[-0.719357565511,-0.612848689772,-0.472527472527,-0.918850380389,-0.474218089603,-0.802197802198],
			[-0.771799628942,-0.625231910946,-0.508348794063,-0.890538033395,-0.509276437848,-0.694805194805],
			[-0.7430523918,-0.616400911162,-0.529840546697,-0.914350797267,-0.507061503417,-0.689293849658],
			[-0.717616580311,-0.588082901554,-0.599740932642,-0.944300518135,-0.607512953368,-0.54274611399],
			[-0.986516853933,-0.805842696629,-0.402247191011,-0.65393258427,-0.327640449438,-0.823820224719],
			[-1.0,-0.807531380753,-0.419246861925,-0.655230125523,-0.312133891213,-0.805857740586],
			[-0.998309382925,-0.816568047337,-0.411665257819,-0.645815722739,-0.331360946746,-0.796280642434],
			[-1.0,-0.774744027304,-0.449829351536,-0.759726962457,-0.303754266212,-0.711945392491],
			[-1.0,-0.847988077496,-0.49478390462,-0.746646795827,-0.415797317437,-0.49478390462],
			[-1.0,-0.602689486553,-0.408312958435,-0.622249388753,-0.366748166259,-1.0],
			[-1.0,-0.673043478261,-0.328695652174,-0.666086956522,-0.332173913043,-1.0],
			[-0.997345132743,-0.797345132743,-0.388495575221,-0.687610619469,-0.321238938053,-0.80796460177],
			[-1.0,-0.829411764706,-0.43025210084,-0.658823529412,-0.273109243697,-0.808403361345],
			[-1.0,-0.81207133059,-0.462277091907,-0.761316872428,-0.407407407407,-0.556927297668],
			[-0.997737556561,-0.798642533937,-0.369909502262,-0.747737556561,-0.371040723982,-0.714932126697],
			[-0.620592383639,-0.705218617772,-0.796897038082,-0.612129760226,-0.658674188999,-0.606488011283],
			[-0.720541401274,-0.738057324841,-0.694267515924,-0.62101910828,-0.654458598726,-0.571656050955],
			[-0.485849056604,-0.439465408805,-0.805031446541,-0.959119496855,-0.838050314465,-0.47248427673],
			[-0.703495630462,-0.685393258427,-0.628589263421,-0.5911360799,-0.700998751561,-0.69038701623],
			[-0.715363881402,-0.592452830189,-0.573045822102,-0.622641509434,-0.771428571429,-0.725067385445],
			[-0.708626760563,-0.617077464789,-0.549295774648,-0.617957746479,-0.721830985915,-0.785211267606],
			[-0.72602739726,-0.53852739726,-0.564212328767,-0.815068493151,-0.702054794521,-0.654109589041],
			[-0.707794075352,-0.524302559678,-0.763589301122,-0.851020995111,-0.507046304285,-0.646246764452],
			[-0.743119266055,-0.564875491481,-0.893840104849,-0.799475753604,-0.533420707733,-0.465268676278],
			[-0.797108673978,-0.668494516451,-0.787637088734,-0.661515453639,-0.486041874377,-0.599202392822],
			[-0.660672400313,-0.508209538702,-0.695074276779,-0.851446442533,-0.558248631744,-0.72634870993],
			[-0.724568490635,-0.497612926919,-0.570326845391,-0.872199779655,-0.72970987881,-0.60558207859],
			[-0.786085150571,-0.666666666667,-0.758047767394,-0.616822429907,-0.595015576324,-0.577362409138],
			[-0.744095875925,-0.622841029256,-0.715192104336,-0.711667254142,-0.594642227705,-0.611561508636],
			[-0.749546279492,-0.601451905626,-0.666061705989,-0.701633393829,-0.588384754991,-0.692921960073],
			[-0.737506575487,-0.649658074698,-0.714886901631,-0.642819568648,-0.59863229879,-0.656496580747],
			[-0.753312014619,-0.583371402467,-0.789858382823,-0.698492462312,-0.601644586569,-0.573321151211],
			[-0.827202737382,-0.573139435415,-0.610778443114,-0.72626176219,-0.559452523524,-0.703165098375],
			[-0.732015376167,-0.522240527183,-0.457440966502,-0.948380010983,-0.702361339923,-0.637561779242],
			[-0.773913043478,-0.509316770186,-0.822360248447,-0.742857142857,-0.633540372671,-0.51801242236],
			[-0.683801295896,-0.663066954644,-0.696760259179,-0.58444924406,-0.726133909287,-0.645788336933],
			[-0.69450101833,-0.615362234507,-0.494908350305,-0.519930171661,-0.686936281641,-0.988361943555],
			[-0.718301435407,-0.602870813397,-0.794258373206,-0.672846889952,-0.56519138756,-0.646531100478],
			[-0.651766709238,-0.652618135377,-0.739463601533,-0.612601106854,-0.667943805875,-0.675606641124],
			[-0.610655737705,-0.568852459016,-0.669672131148,-0.618032786885,-0.722131147541,-0.810655737705],
			[-0.676595744681,-0.584526112186,-0.787234042553,-0.573694390716,-0.601547388781,-0.776402321083],
			[-0.830036221789,-0.548063527445,-0.406519921984,-0.755363611034,-0.67288938423,-0.787127333519],
			[-0.727125767863,-0.512447462011,-0.71225347559,-0.903653410928,-0.658583899127,-0.485935984481],
			[-0.801007556675,-0.496221662469,-0.48026868178,-0.703610411419,-0.617968094039,-0.900923593619],
			[-0.697257026752,-0.506942092787,-0.781239417541,-0.811039620725,-0.528614967829,-0.674906874365],
			[-0.688546255507,-0.483259911894,-0.511894273128,-0.874449339207,-0.774889867841,-0.666960352423],
			[-0.824320759694,-0.588499076761,-0.858084938011,-0.68451595885,-0.557372724875,-0.48720654181],
			[-0.70290878283,-0.523863315448,-0.670149675233,-0.865009884213,-0.60180739904,-0.636260943236],
			[-0.712434691745,-0.510971786834,-0.781818181818,-0.867920585162,-0.570741901776,-0.556112852665],
			[-0.828371278459,-0.50122591944,-0.359719789842,-0.802451838879,-0.586690017513,-0.921541155867],
			[-0.763518385004,-0.63590483057,-0.870944484499,-0.648882480173,-0.545782263879,-0.534967555876],
			[-0.747568208778,-0.564887307236,-0.488493475682,-0.732384341637,-0.64650059312,-0.820166073547],
			[-0.821613236815,-0.654084798345,-0.876938986556,-0.669596690796,-0.46639089969,-0.511375387797],
			[-0.762896825397,-0.660218253968,-0.962301587302,-0.753968253968,-0.470734126984,-0.389880952381],
			[-0.758560140474,-0.523266022827,-0.675153643547,-0.722563652327,-0.627743634767,-0.692712906058],
			[-0.818374558304,-0.490459363958,-0.536395759717,-0.819081272085,-0.591519434629,-0.744169611307],
			[-0.45049272642,-0.564992961051,-0.972313467855,-0.8385734397,-0.639605818864,-0.53402158611],
			[-0.628250591017,-0.640070921986,-0.586288416076,-0.707446808511,-0.628841607565,-0.809101654846],
			[-0.779750581272,-0.624603677869,-0.507080955401,-0.576833650391,-0.546396110759,-0.965335024308],
			[-0.66026289181,-0.619143916414,-0.661611054938,-0.74384900573,-0.584765756657,-0.730367374452],
			[-0.617343427392,-0.608396421198,-0.683413626979,-0.774948382657,-0.600137646249,-0.715760495526],
			[-0.612815269257,-0.61554192229,-0.646898432175,-0.760736196319,-0.638718473074,-0.725289706885],
			[-0.584295612009,-0.671285604311,-0.857582755966,-0.703618167821,-0.612009237875,-0.571208622017],
			[-0.956538917424,-0.534176214935,-0.465823785065,-0.625049387594,-0.495061240616,-0.923350454366],
			[-0.883592574009,-0.61866532865,-0.64743268105,-0.712995484195,-0.452416792106,-0.68489713999],
			[-0.839961358879,-0.51215585252,-0.550796973112,-0.743680566736,-0.513121880535,-0.840283368218],
			[-0.83833226973,-0.546054031057,-0.559242714316,-0.677089980855,-0.540097851521,-0.839183152521],
			[-0.846597206828,-0.581910884505,-0.566836621592,-0.713145643981,-0.519397029483,-0.772112613611],
			[-0.844496487119,-0.553161592506,-0.711475409836,-0.654332552693,-0.499297423888,-0.737236533958],
			[-0.90527607362,-0.499877300613,-0.463067484663,-0.696196319018,-0.530306748466,-0.90527607362],
			[-0.675305442429,-0.499814883377,-0.49574231766,-0.831914105887,-0.635690485006,-0.861532765642],
			[-0.7153784219,-0.549516908213,-0.426328502415,-0.807165861514,-0.618760064412,-0.882850241546],
			[-0.68115942029,-0.524200164069,-0.514902925896,-0.823352474706,-0.589280831282,-0.867104183757],
			[-0.717196922437,-0.698482012892,-0.650655021834,-0.957579538366,-0.658140985652,-0.317945518819],
			[-0.788389513109,-0.561048689139,-0.767415730337,-0.810486891386,-0.496629213483,-0.576029962547],
			[-0.81103074141,-0.521247739602,-0.509493670886,-0.726491862568,-0.624321880651,-0.807414104882],
			[-0.795004306632,-0.617571059432,-0.832902670112,-0.806488659202,-0.4556416882,-0.492391616423],
			[-0.635236830456,-0.693669765383,-0.700752545374,-0.72023019035,-0.628154050465,-0.621956617973],
			[-0.403155421282,-0.675058744545,-0.969788519637,-0.865726753944,-0.658945955018,-0.427324605572],
			[-0.650539784086,-0.664134346261,-0.71931227509,-0.709716113555,-0.628948420632,-0.627349060376],
			[-0.39218328841,-0.75,-1.0,-0.88679245283,-0.541778975741,-0.429245283019],
			[-0.609501738123,-0.725376593279,-0.811123986095,-0.687137891078,-0.581691772885,-0.58516801854],
			[-0.647305808258,-0.685094471659,-0.771868439468,-0.62211336599,-0.601119664101,-0.672498250525],
			[-0.815505397448,-0.524370297677,-0.719332679097,-0.722603859993,-0.525024533857,-0.693163231927],
			[-0.822703335284,-0.700994733762,-0.624341720304,-0.715623171445,-0.534815681685,-0.601521357519],
			[-0.72684160607,-0.617451786279,-0.607967119823,-0.791969649067,-0.583939298135,-0.671830540626],
			[-0.706504065041,-0.512195121951,-0.587804878049,-0.717886178862,-0.641463414634,-0.834146341463],
			[-0.813014827018,-0.530477759473,-0.668863261944,-0.707578253707,-0.550247116969,-0.72981878089],
			[-0.801541425819,-0.622350674374,-0.757225433526,-0.691714836224,-0.523121387283,-0.604046242775],
			[-0.638686131387,-0.590510948905,-0.637226277372,-0.739416058394,-0.64598540146,-0.748175182482],
			[-0.957792207792,-0.734415584416,-0.388311688312,-0.663636363636,-0.466233766234,-0.78961038961],
			[-0.602090819993,-0.576608951323,-0.906566481542,-0.802025481869,-0.648480888598,-0.464227376674],
			[-0.632227488152,-0.638862559242,-0.679620853081,-0.759241706161,-0.576303317536,-0.713744075829],
			[-0.678212290503,-0.645810055866,-0.719553072626,-0.778770949721,-0.579888268156,-0.597765363128],
			[-0.842851667305,-0.648907627443,-0.861249520889,-0.755461862783,-0.428133384438,-0.463395937141],
			[-0.830425963489,-0.588640973631,-0.74523326572,-0.783367139959,-0.530223123732,-0.522109533469],
			[-0.829075708314,-0.643288434742,-0.866233163028,-0.766836971667,-0.427775197399,-0.466790524849]
		])

		self.trainingTarget = np.array([
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0]
		])
		self.testingInput = np.array([
			[-0.912997903564,-0.520964360587,-0.343815513627,-0.666666666667,-0.572327044025,-0.98322851153],
			[-1.0,-0.649509803922,-0.557598039216,-0.730392156863,-0.552696078431,-0.509803921569],
			[-0.685468451243,-0.225621414914,-0.877629063098,-1.0,-0.874760994264,-0.336520076482],
			[-0.974674384949,-0.60492040521,-0.306801736614,-0.596237337192,-0.523154848046,-0.994211287988],
			[-1.0,-0.647940074906,-0.553772070626,-0.71214553237,-0.559122525415,-0.527019796683],
			[-0.999355462456,-0.525620367386,-0.661617789236,-0.733161456655,-0.44698678698,-0.633258137286],
			[-0.637371338084,-0.369754552652,-0.98178939034,-1.0,-0.733966745843,-0.27711797308],
			[-1.0,-0.541154791155,-0.323095823096,-0.688574938575,-0.544226044226,-0.902948402948],
			[-0.687358916479,-0.541760722348,-0.698645598194,-0.98532731377,-0.51467268623,-0.57223476298],
			[-0.735056542811,-0.467528271405,-0.637479806139,-0.988368336026,-0.528917609047,-0.642649434572],
			[-1.0,-0.735019241341,-0.423859263332,-0.659153380979,-0.280923584387,-0.901044529962],
			[-0.670080862534,-0.678706199461,-0.995687331536,-0.949326145553,-0.415633423181,-0.290566037736],
			[-0.589359310603,-0.508430123642,-0.919820157362,-0.957287373548,-0.638066691645,-0.3870363432],
			[-0.730348258706,-0.603980099502,-0.540298507463,-0.884577114428,-0.580099502488,-0.660696517413],
			[-1.0,-0.881237113402,-0.427628865979,-0.659381443299,-0.294845360825,-0.736907216495],
			[-0.656462585034,-0.557823129252,-0.547619047619,-0.702947845805,-0.685941043084,-0.849206349206],
			[-0.718298223874,-0.56712102437,-0.567947129285,-0.832300702189,-0.721602643536,-0.592730276745],
			[-0.779670037254,-0.626397019691,-0.505055880788,-0.903139968068,-0.639169771155,-0.546567323044],
			[-0.676726342711,-0.587723785166,-0.609207161125,-0.667519181586,-0.585677749361,-0.873145780051],
			[-0.670368725011,-0.679253665038,-0.65348733896,-0.578853842737,-0.713904931142,-0.704131497112],
			[-0.668614357262,-0.603505843072,-0.75959933222,-0.668614357262,-0.613522537563,-0.686143572621],
			[-0.728090952155,-0.567977261961,-0.688299384178,-0.586925627665,-0.678825201326,-0.749881572714],
			[-0.854160868355,-0.685499582522,-0.929306985806,-0.665460617868,-0.388811578068,-0.476760367381],
			[-0.716760502382,-0.509311390212,-0.787353832828,-0.871372888696,-0.566478995236,-0.548722390645],
			[-0.849547920434,-0.642676311031,-0.745388788427,-0.668716094033,-0.531283905967,-0.562386980108],
			[-0.800229621125,-0.590508993494,-0.905855338691,-0.642556448527,-0.539226942212,-0.521622655951],
			[-0.629970246146,-0.665674871517,-0.840952123343,-0.703543413579,-0.559642953746,-0.600216391669],
			[-0.949804432855,-0.721642764016,-0.460886571056,-0.526727509778,-0.45371577575,-0.887222946545],
			[-0.767157894737,-0.603368421053,-0.512421052632,-0.585684210526,-0.558736842105,-0.972631578947],
			[-0.65325738697,-0.641865432538,-0.616945532218,-0.74510501958,-0.604841580634,-0.73798504806],
			[-0.799054787327,-0.773148958516,-0.61106248906,-0.804305968843,-0.512340276562,-0.500087519692],
			[-0.872549019608,-0.613590263692,-0.604800540906,-0.741717376606,-0.47937795808,-0.687964841109],
			[-0.698448732501,-0.500189178963,-0.515323496027,-0.824820279985,-0.623912220961,-0.837306091563],
			[-0.824848024316,-0.599544072948,-0.834346504559,-0.803191489362,-0.476063829787,-0.462006079027],
			[-0.640618101545,-0.695364238411,-0.712141280353,-0.709492273731,-0.600883002208,-0.641501103753],
			[-0.679154658982,-0.750240153698,-0.71469740634,-0.521613832853,-0.622478386167,-0.71181556196],
			[-0.676344597811,-0.738219895288,-0.710613993337,-0.630652070443,-0.621132793908,-0.623036649215],
			[-0.618996222342,-0.701025364274,-0.6956287102,-0.698866702644,-0.624392876417,-0.661090124123],
			[-0.847046773643,-0.527483782861,-0.689996585865,-0.778081256402,-0.483782861045,-0.673608740184],
			[-0.645112781955,-0.506165413534,-0.848421052632,-0.814135338346,-0.714285714286,-0.471879699248],
			[-0.720733427362,-0.534555712271,-0.590973201693,-0.825105782793,-0.622002820874,-0.706629055007]
		])

		self.testingTarget = np.array([
			[1,0,0,0],
			[1,0,0,0],
			[1,0,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,1,0,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,1,0],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,1],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0],
			[0,0,0,0]
		])
	
	
	def tarExtracted(self):
		# Determine the minimal non-zero value of the matrice
		try:
			#min = np.nanmin(self.currentExtracted)											# fmin identity seems buggy
			self.tar = np.min(self.currentExtracted[~np.isnan(self.currentExtracted)])			# use this hack instead
		except ValueError:
			self.tar = 0
		
		# Remove this value to all elements of the matrice
		self.currentExtracted = self.currentExtracted-np.array([self.tar])
	
	
	def getEuclidianDistance(self, a, b):
		return np.linalg.norm(a-b)

	def getAvgEuclidianDistance(self):
		# The reference point is taken at the center of the matrix
		h, v = self.currentExtracted.shape
		ref_h = h/2
		ref_v = v/2
		
		# Then we determine all euclidian distances between relevant points and that reference point
		distances = []
		
		# If the reference point is not a number, it will be considered as 0
		if np.isnan(self.currentExtracted[ref_h, ref_v]):
			reference = 0.0
		else:
			reference = self.currentExtracted[ref_h, ref_v]
	
		for i in range(h):
			for j in range(v):
				if not np.isnan(self.currentExtracted[i,j]) and (i!=ref_h or j!=ref_v):
					distances.append(self.getEuclidianDistance(np.array([i, j, self.currentExtracted[i,j]]), np.array([ref_h, ref_v, reference])))
		
		return np.average(distances)
	
	def removeEmptyColumnsRows(self):
		# Re-initialise empty holders
		self.emptyTop, self.emptyLeft, self.emptyBottom, self.emptyRight = 0, 0, 0, 0
		
		
		# Remove all zeros columns and rows from both matrices
		column = self.currentBinary.sum(axis=0).astype(int)
		row = self.currentBinary.sum(axis=1).astype(int)

		# Remove empty left columns
		i = 0
		while i<len(column) and column[i]==0:
			self.currentExtracted = self.currentExtracted[:,1:]
			self.currentBinary = self.currentBinary[:,1:]
			self.emptyLeft += 1
			i += 1

		# Remove empty right columns
		i = len(column)-1
		while i>=0 and column[i]==0:
			self.currentExtracted = self.currentExtracted[:,:-1]
			self.currentBinary = self.currentBinary[:,:-1]
			self.emptyRight += 1
			i -= 1

		# Remove empty top rows
		i = 0
		while i<len(row) and row[i]==0:
			self.currentExtracted = self.currentExtracted[1:,:]
			self.currentBinary = self.currentBinary[1:,:]
			self.emptyTop += 1
			i += 1

		# Remove empty bottom rows
		i = len(row)-1
		while i>=0 and row[i]==0:
			self.currentExtracted = self.currentExtracted[:-1,:]
			self.currentBinary = self.currentBinary[:-1,:]
			self.emptyBottom += 1
			i -= 1
		
	
	
	
	def rotate(self, hand, elbow):
		# The dataset can be oriented in 4 different ways that can be rotated back to form a vertical line between the hand and the elbow joints
		
		# First, determine the relative position of the hand
		if hand[0]-elbow[0]<0:
			# the hand is located in the lower part
			v = elbow[0]-hand[0]
			up = False
		else:
			# the hand is located in the upper part
			v = hand[0]-elbow[0]
			up = True
		
		if hand[1]-elbow[1]<0:
			# the hand is located in the right part
			h = elbow[1]-hand[1]
			left = False
		else:
			# the hand is located in the left part
			h = hand[1]-elbow[1]
			left = True
		
		
		# Check if the elbow is on top/bottom extrems to determine the rotation degree
		if v>h:
			if not up:
				self.rotationAngle = 0
			else:
				self.rotationAngle = 2
		else:
			if left:
				self.rotationAngle = 1
			else:
				self.rotationAngle = -1
		
		
		# Apply rotation
		self.currentBinary = np.rot90(self.currentBinary, self.rotationAngle)
		self.currentExtracted = np.rot90(self.currentExtracted, self.rotationAngle)
	
	
	def getHistogram(self):
		hist, bin_edges = np.histogram(~np.isnan(self.currentExtracted), density=True)
		return hist
	
	def sift(self, input):
		data = np.copy(self.currentExtracted).astype(np.uint8)
		gray = cv2.cvtColor(data, cv2.COLOR_GRAY2BGR)

		sift = cv2.SIFT()
		kp = sift.detect(gray, None)
		
		for i in range(len(kp)):
			x = kp[i].pt[0]
			y = kp[i].pt[1]
			size = kp[i].size
			dir_in_degrees = kp[i].angle
			laplacian = kp[i].class_id
			hessian = round(kp[i].response)
			
			input.append(laplacian)
			input.append(hessian)
			
			print laplacian
			print hessian
			print dir_in_degrees
			print size
	
	def surf(self, input):
		data = np.copy(self.currentExtracted).astype(np.uint8)
		gray = cv2.cvtColor(data, cv2.COLOR_GRAself.cropRightBGR)
		
		surfDetector = cv2.FeatureDetector_create("SURF")
		surfDescriptorExtractor = cv2.DescriptorExtractor_create("SURF")
		kp = surfDetector.detect(gray)
		(kp, descriptors) = surfDescriptorExtractor.compute(gray, kp)
		
		for i in range(len(kp)):
			x = kp[i].pt[0]
			y = kp[i].pt[1]
			size = kp[i].size
			dir_in_degrees = kp[i].angle
			laplacian = kp[i].class_id
			hessian = round(kp[i].response)
			
			input.append(laplacian)
			input.append(hessian)
			
			print laplacian
			print hessian
			print dir_in_degrees
			print size
	
	
	def display(self, b):
		x,y = b.shape
		for i in range(x):
			text = ""
			for j in range(y):
				if np.isnan(b[i,j]) or int(b[i,j]) == 0:
					text += " "
				else:
					text += str(int(b[i,j]))
					text += ","
			print text
		print
	
	def displayHTML(self, b):
		
		old_min = float(np.min(b))
		old_max = float(np.max(b))
		
		old_range = float(old_max - old_min)
		new_min = 0
		new_range = 1 - float(new_min)
		
		def f(n, old_min, old_range, new_range, new_min):
		    return float((n - float(old_min)) / float(old_range) * float(new_range) + float(new_min))

		f = np.vectorize(f)
		b = f(b, old_min, old_range, new_range, new_min)
		
		
		
		x,y = b.shape
		for i in range(x):
			text = ""
			for j in range(y):
				if np.isnan(b[i,j]):
					text += "ctx.fillStyle='rgba(0,0,0,0)'; ".format()
					text += "ctx.fillRect({0},{1},2,2);\n".format(j*2,i*2)
				else:
					text += "ctx.fillStyle='rgba(0,0,0,{0:.2f})'; ".format(b[i,j])
					text += "ctx.fillRect({0},{1},2,2);\n".format(j*2,i*2)
			print text
		print
		
		sys.exit(1)
		
	
	
	
	
	def keepRange(self, value, max):
		if value < 0:
			return 0
		elif value > max:
			return max
		else: 
			return value

	def countWithinArea(self, data, total, h1, v1, h2,v2):
		# Return the percentage of actual data within a restricted area
		if self.currentW != 0 and self.currentH != 0:
			return np.sum(data[v1:v2, h1:h2], dtype=np.int32)/float(total)*100
		else:
			return 0
	
	def diviseInSix(self):
		h,w = self.currentBinary.shape
		total = np.sum(self.currentBinary)
		
		output = []
	
		output.append(self.countWithinArea(self.currentBinary, total, 0, 0, w/2, h/3)) 			# upper left
		output.append(self.countWithinArea(self.currentBinary, total, 0, h/3, w/2, 2*(h/3))) 	# middle left
		output.append(self.countWithinArea(self.currentBinary, total, 0, 2*(h/3), w/2, h)) 		# lower left
		
		output.append(self.countWithinArea(self.currentBinary, total, w/2, 0, w, h/3)) 			# upper right
		output.append(self.countWithinArea(self.currentBinary, total, w/2, h/3, w, 2*(h/3))) 	# middle right
		output.append(self.countWithinArea(self.currentBinary, total, w/2, 2*(h/3), w, h)) 		# lower right
		
		return output
	
	
	def getElbowHandAlignment(self, depth, hand_v, hand_h, elbow_v, elbow_h):
		# Allow to discriminate gestures pointing left/right up, lateral and down
		# Uses the disposition of the hand and the elbow
		
		# At 1m, a variation of 60 pixels indicates a position change
		threshold = (60/float(depth))*1000
		
		# Right, Left or Front?
		if hand_h > elbow_h+threshold:
			h = 1	# Left (from user point of view)
		elif hand_h+threshold < elbow_h:
			h = -1	# Right (from user point of view)
		else:
			h = 0	# Front
		
		
		# Up, Down or Lateral?
		if hand_v > elbow_v+threshold:
			v = -1	# down
		elif hand_v+threshold < elbow_v:
			v = 1	# up
		else:
			v = 0	# lateral
		
		
		# Debug
		#if h==-1:
		#	text = "Pointing to Right"
		#elif h==0:
		#	text = "Pointing to Front"
		#else:
		#	text = "Pointing to Left"
		#
		#if v==-1:
		#	text += " down"
		#elif v==0:
		#	text += " lateral"
		#else:
		#	text += " up"
		#print text
		
		
		
		return [h,v]
		
		
	
	
	def getTipHandDepthDiff(self, depthMap):
		# Retrieve fingertip depth
		fingerTipDepth = depthMap[self.fingerTip[1]][self.fingerTip[0]]
		
		# Retrieve non-empty values of the last row to get the coordinates of the middle value
		index = np.nonzero(self.currentBinary[-1] == 1)
		h = index[0][0]+int((index[0][-1]-index[0][0])/2)
		
		# Retrieve lower part depth
		lowerDepth = self.currentExtracted[-1][h]+self.tar
		
		# Check difference
		threshold = 50
		
		if fingerTipDepth+threshold < lowerDepth:
			print "front"
			return 1	# Front
		elif fingerTipDepth > lowerDepth+threshold:
			print "back"
			return -1	# Back
		else:
			print "lateral"
			return 0	# Lateral
	
	def getTopHandSizeDiff(self):
		# Get the height of the hand
		height = len(self.currentBinary)
		
		# Count the average number of data in the top 8% part
		upperIndex = int(height*0.08)
		lowerIndex = int(height*0.75)
		
		
		
		lower = np.sum(self.currentBinary[upperIndex:upperIndex+1, :])
		upper = np.sum(self.currentBinary[lowerIndex:lowerIndex+1, :], dtype=np.int32)
		
		return lower/float(upper)
		
		print "lower= {0}\t upper= {1} \t divised={2}".format(lower, upper, lower/float(upper))
		
	
	
	def normalizeInput(self, input, old_min=0, old_max=100):
		# Normalize the data in a range from -1 to 1
		old_range = old_max - old_min
		new_min = -1
		new_range = 1 - new_min
	
		return [float((n - old_min) / float(old_range) * new_range + new_min) for n in input]
	
	def getFeaturesFull(self, data):
		# Retrieve the depth map and convert it to a numpy array
		depthMap = np.array(data["depth_map"])
		
		# Retrieve the position of the pointing hand
		if data["hand"]==Dataset.LEFT_HAND:
			h,v,d = map(int, data["skeleton"]["hand"]["left"])
			h2,v2,d2 = map(int, data["skeleton"]["elbow"]["left"])
		elif data["hand"]==Dataset.RIGHT_HAND:
			h,v,d = map(int, data["skeleton"]["hand"]["right"])
			h2,v2,d2 = map(int, data["skeleton"]["elbow"]["right"])
		else:
			# Take arbitrarily the right hand
			h,v,d = map(int, data["skeleton"]["hand"]["right"])
			h2,v2,d2 = map(int, data["skeleton"]["elbow"]["right"])
		
		print "Finger tip manual position: {0}".format(data["fingerTip"]["position"])
		print "Eye manual position: {0}".format(data["eye"]["position"])
		
		# Then, get the corresponding features
		return self.getFeatures(h,v,d, h2,v2,d2, depthMap, data["skeleton"]["head"], 0)
	
	def getFeaturesLight(self, data):
		# Retrieve the depth map and convert it to a numpy array of floats
		depthMap = np.array(data["depth_map"])
		
		# Retrieve the position of the pointing hand
		if data["hand"]==LightDataset.LEFT_HAND:
			h,v,d = map(int, data["skeleton"]["hand"]["left"])
			h2,v2,d2 = map(int, data["skeleton"]["elbow"]["left"])
		elif data["hand"]==LightDataset.RIGHT_HAND:
			h,v,d = map(int, data["skeleton"]["hand"]["right"])
			h2,v2,d2 = map(int, data["skeleton"]["elbow"]["right"])
		else:
			# Take arbitrarily the right hand
			h,v,d = map(int, data["skeleton"]["hand"]["right"])
			h2,v2,d2 = map(int, data["skeleton"]["elbow"]["right"])
		
		# Then, get the corresponding features
		return self.getFeatures(h,v,d, h2,v2,d2, depthMap, data["skeleton"]["head"], 0)
	
	
	def getFeaturesLive(self, data):
		result = []
		
		# Retrieve the position of the pointing hand
		if data.hand==LiveDataset.LEFT_HAND or data.hand==LiveDataset.BOTH_HAND:
			h,v,d = map(int, data.skeleton["hand"]["left"])
			h2,v2,d2 = map(int, data.skeleton["elbow"]["left"])
			result.append(self.getFeatures(h,v,d, h2,v2,d2, data.depth_map, data.skeleton["head"], 0))
		if data.hand==LiveDataset.RIGHT_HAND or data.hand==LiveDataset.BOTH_HAND:
			h,v,d = map(int, data.skeleton["hand"]["right"])
			h2,v2,d2 = map(int, data.skeleton["elbow"]["right"])
			result.append(self.getFeatures(h,v,d, h2,v2,d2, data.depth_map, data.skeleton["head"], len(result)))
		
		# Then, return the corresponding features
		return result
	
	def getFeatures(self, h,v,d, h2,v2,d2, depthMap, head, handId=0):
		# Determine the bounding box around the pointing hand regarding to the depth of the hand
		if d != 0:
			shift = int((1000.0/d)*90)
		else:
			shift = 1
		
	
		# Determine the coordinates of the bounding box to extract
		self.cropTop = self.keepRange(int(v-shift), 480)
		self.cropLeft = self.keepRange(int(h-shift), 640)
		self.cropBottom = self.keepRange(int(v+shift)+1, 480)
		self.cropRight = self.keepRange(int(h+shift)+1, 640)
	
		# Extract the informations within the bounding box
		startV = shift-v+self.cropTop
		startH = shift-h+self.cropLeft
		endV = shift+self.cropBottom-v
		endH = shift+self.cropRight-h
		
	
		max = (2*shift)+1
		self.currentExtracted = np.zeros(max*max).reshape(max, max)
		self.currentExtracted[startV:endV, startH:endH] = depthMap[self.cropTop:self.cropBottom, self.cropLeft:self.cropRight]
		self.currentBinary = np.copy(self.currentExtracted)
		
	
		# Extract the hand from the background with a threshold
		start = d-100
		end = d+100
		
		self.currentBinary = self.thresholdBinary(self.currentBinary, start, end)
		self.currentExtracted = self.thresholdExtracted(self.currentExtracted, start, end)
		
		
		# Remove all zeros columns and rows from both matrices
		self.removeEmptyColumnsRows()
		
		
		# Initialize the input features
		input = []
		
		
		
		
		# /--------------------------------\
		# |          Feature 1-2           |
		# |     Hand / Elbow alignment     |
		# \--------------------------------/
		
		
		#input.extend(self.getElbowHandAlignment(d, v, h, v2, h2))
		
		
		
		# Rotate the hand to form a vertical line between the hand and the elbow
		self.rotate([v,h], [v2,h2])
		self.tarExtracted()
		
		# Retrieve the finger tip position
		self.fingerTip[handId] = self.getFingerTip()
		
		# Retrieve eyes position
		self.eyePosition[handId] = self.getEyePosition(depthMap, head, self.getElbowHandAlignment(d, v, h, v2, h2))
		
		
		
		
		# /-------------------------------\
		# |           Feature 3           |
		# |   Finger tip / lower depth    |
		# \-------------------------------/
		
		
		#input.append(self.getTipHandDepthDiff(depthMap))
		
		
		
		#input.extend(self.normalizeInput([self.getTopHandSizeDiff()], old_min=0, old_max=1))
		
		
		
		
		
		# /----------------------------------------\
		# | Depth map of the hand is now extracted |
		# |        Starting getting features       |
		# \----------------------------------------/
		
		
		
		# Hold the ratio
		self.currentH, self.currentW = self.currentBinary.shape
		
		
		# /------------------------------------\
		# |          Feature 1 to 6            |
		# |   Percent of data in sub-regions   |
		# \------------------------------------/
		
		
		
		
		# Hold the percentage of actual data within sub-areas
		input.extend(self.normalizeInput(self.diviseInSix()))
		
		
		return input
	
	
	def getFingerTip(self):
		# Prevent empty calls
		if len(self.currentBinary)==0:
			return [0,0]
		
		# Retrieve non-empty values of the first row
		index = np.nonzero(self.currentBinary[0] == 1)
		output = []
		
		# Finger tip coordinates (once rotated!)
		h = index[0][0]+int((index[0][-1]-index[0][0])/2)
		v = 0
		
		
		# Revert rotation to get the real coordinates
		if self.rotationAngle == -1:
			v = len(self.currentBinary[0])-1-h
			h = 0
		elif self.rotationAngle == 2:
			h = len(self.currentBinary[0])-1-h
			v = len(self.currentBinary)
		elif self.rotationAngle == 1:
			v = h
			h = len(self.currentBinary)
		
		# Revert empty columns/rows and initial crop
		return [self.cropLeft+h+self.emptyLeft, self.cropTop+v+self.emptyTop]
		
		
		
	def getEyePosition(self, depthMap, head, elbowHand):
		
		# First extract a sub-area based on the depth
		h,v,d = map(int, head)
		
		
		# Determine the bounding box around the head regarding its depth
		if d != 0:
			shift = int((1000.0/d)*90)
			line = int((1000.0/d)*80)
		else:
			shift = 1
			line = 1
	
		# Determine the coordinates of the bounding box to extract
		cropTop = self.keepRange(int(v-shift), 480)
		cropLeft = self.keepRange(int(h-shift), 640)
		cropBottom = self.keepRange(int(v+shift)+1, 480)
		cropRight = self.keepRange(int(h+shift)+1, 640)
	
		# Extract the informations within the bounding box
		startV = shift-v+cropTop
		startH = shift-h+cropLeft
		endV = shift+cropBottom-v
		endH = shift+cropRight-h
		
	
		max = (2*shift)+1
		extracted = np.zeros(max*max).reshape(max, max)
		extracted[startV:endV, startH:endH] = depthMap[cropTop:cropBottom, cropLeft:cropRight]
		
	
		# Extract the head from the background with a threshold
		start = d-100
		end = d+100
		
		extracted = self.thresholdBinary(extracted, start, end)
		
		
		
		
		
		
		
		
		# Re-initialise empty holders
		emptyTop, emptyLeft, emptyBottom, emptyRight = 0, 0, 0, 0
		
		
		# Remove all zeros columns and rows from both matrices
		column = extracted.sum(axis=0).astype(int)
		row = extracted.sum(axis=1).astype(int)

		# Remove empty left columns
		i = 0
		while i<len(column) and column[i]==0:
			extracted = extracted[:,1:]
			emptyLeft += 1
			i += 1

		# Remove empty right columns
		i = len(column)-1
		while i>=0 and column[i]==0:
			extracted = extracted[:,:-1]
			emptyRight += 1
			i -= 1

		# Remove empty top rows
		i = 0
		while i<len(row) and row[i]==0:
			extracted = extracted[1:,:]
			emptyTop += 1
			i += 1
		
		
		
		
		
		# The eyes are assumed to look at the finger tip
		# Based on the alignment of the hand and the elbow, we can extrapolate their relative position
		
		# First, let's make sure the chosen line is accessible
		if len(extracted)<=line:
			return [0,0]
		else:
			
			proportion = 0.15
			total = np.sum(extracted[line])
			index = np.nonzero(extracted[line] == 1)
			
			if len(index[0])==0:
				return [0,0]
			else:
				# left side (from the user point of view)
				if elbowHand[0] == 1:
					h = index[0][0] + total-(total*proportion)
				# right side (from the user point of view)
				elif elbowHand[0] == -1:
					h = index[0][0] + (total*proportion)
				# center
				else:
					h = index[0][0] + (total*0.5)
				
				
				# Return the coordinates
				
				v = int(cropTop+emptyTop+line)
				h = int(cropLeft+emptyLeft+h)
				
				return [h, v]
		
		
		
		
		
		
	def getData(self):
		print "self.trainingInput = np.array(["
		
		for i in range(len(self.trainingInput)):
			text = "	["
			for j in range(len(self.trainingInput[i])):
				text+= "{0}".format(str(self.trainingInput[i][j]))
				if j<len(self.trainingInput[i])-1:
					text += ","
			text += "]"
			if i<len(self.trainingInput)-1:
				text += ","
			print text
		
		print "])"
		print
		
		
		print "self.trainingTarget = np.array(["
		
		for i in range(len(self.trainingTarget)):
			text = "	["
			for j in range(len(self.trainingTarget[i])):
				text+= "{0}".format(str(self.trainingTarget[i][j]))
				if j<len(self.trainingTarget[i])-1:
					text += ","
			text += "]"
			if i<len(self.trainingTarget)-1:
				text += ","
			print text
		
		print "])"
		
		
		print "self.testingInput = np.array(["
		
		for i in range(len(self.testingInput)):
			text = "	["
			for j in range(len(self.testingInput[i])):
				text+= "{0}".format(str(self.testingInput[i][j]))
				if j<len(self.testingInput[i])-1:
					text += ","
			text += "]"
			if i<len(self.testingInput)-1:
				text += ","
			print text
		
		print "])"
		print
		
		print "self.testingTarget = np.array(["
		
		for i in range(len(self.testingTarget)):
			text = "	["
			for j in range(len(self.testingTarget[i])):
				text+= "{0}".format(str(self.testingTarget[i][j]))
				if j<len(self.testingTarget[i])-1:
					text += ","
			text += "]"
			if i<len(self.testingTarget)-1:
				text += ","
			print text
		
		print "])"
		
	
	
	def getRestrained1Weights(self):
		# Stopped at Iteration 30301
		# Error: 9.953473
		# Training rate: 0.1
		# Momentum: 0.05
		# Hidden layers: 15
		# Features: only sub-region percents
		return [
				np.array([[ -1.41040880e+01,  1.90293774e+01,  2.80894870e+01, -3.60434360e+01,  1.79037821e+01, -9.69066510e+00, -1.30642500e+00],
				 [ -1.07562358e+01,  6.66307303e+00,  2.72292762e+00, -3.09187842e+00,  1.35699561e-02, 4.45837704e+00, 1.07290037e-01],
				 [ 6.31790698e+00,  1.62322886e+01,  5.04809523e+00, -1.33352638e+01,  1.21240711e+01, -1.74135430e+01, -2.34482310e+00],
				 [ 1.61406219e+01, -1.62283685e+01, -1.51661543e+01, 2.67217025e+01, -2.36362367e+01, 2.44169750e+00, 2.56869669e+00],
				 [ -1.71613896e+00, -9.87461964e-01, -7.61620509e-01, 1.60930452e+00, -2.66771352e+00,  1.03694082e-01, 1.10998402e+00],
				 [ -1.05719212e+01,  9.99702139e+00,  1.94435631e+00, -1.69678648e+01,  2.40826402e+01, -7.59351962e+00, -2.38847975e-01],
				 [ -1.44032869e+01, -2.74275851e-01, -7.37703393e+00, 1.75759100e+01,  1.07549416e+01,  1.39110842e+00, -2.00374280e+00],
				 [ 4.41253764e+00, -6.09736359e+00,  3.25519650e+00, 1.33079976e+01, -2.20902225e+01, 8.43424010e+00, -2.03229896e-01],
				 [ 6.56695803e+00,  1.84598117e+00,  5.80260256e+00, 4.49485733e+00, -2.88059208e+01, -1.22257336e+00, 2.68469457e+00],
				 [ -2.23397451e+00, -1.20195346e+01, -1.38603671e+01, 1.60653984e+01, -2.90001592e+00,  5.50452973e+00, 2.51788122e+00],
				 [ -1.56626498e+01,  1.36902170e+01, -6.83522766e+00, -6.70481421e+00,  9.42561190e+00,  6.09653659e+00, -7.13429858e-02],
				 [ -2.01850082e+00,  8.62428464e-01, -1.48809576e+01, -1.60224143e+01,  2.94265737e+01, -1.07648352e+00, 8.55669806e-01],
				 [ 7.11032227e+00, -2.52569937e+00,  3.54303040e+00, -1.29189751e+01,  1.05328126e+01, -6.88524207e+00, 2.39027337e-01],
				 [ -1.54913068e+01,  9.44119857e+00, -6.79385938e+00, -1.15716734e+01,  1.78974924e+01,  1.23317960e+01, -1.45773740e+00],
				 [ 8.78281354e+00, -1.02419336e+01,  7.82498881e-01, -9.83347324e+00,  2.70070038e+01, -6.01002987e+00, -2.55193532e+00]]), 
				np.array([[ -2.00769880e+01, -1.00266737e-01, -6.43548127e+00, -1.11144151e+01, -3.50596504e-01, -6.29886050e+00, 1.14172095e+01,  1.74822148e+00, -9.34250414e+00, -6.67163485e+00, -2.00800976e+01,  1.02629085e+01, -1.45924321e+01,  3.03351890e+00, -1.02969635e+01, 1.32761514e+00],
				 [ 1.06194504e+00, -4.50800770e+00,  9.78045757e-01, -1.26353976e+01, -1.70159183e+00,  6.10667724e+00, -3.01203436e+00, -9.08348733e+00, -4.44258033e-02, 1.66245392e+01, -8.14183094e+00, -1.61940406e+01, -1.08798088e+01, -4.96599427e-03,  1.47035657e+01, -2.12862728e+00],
				 [ -1.06058594e+01, -8.62836389e+00,  6.94702533e+00, 6.00818386e+00, -1.78716165e-01, -1.31542624e+01, -7.11069355e+00, -8.39639149e+00,  7.34747215e+00, -8.59198819e+00,  6.97229367e+00, -1.29081149e+01, 4.03522702e+00, -2.53825152e+01, -1.49094909e+01, -9.93461981e-01],
				 [ 6.71137255e+00, -1.58075140e+01, -6.88131140e+00, 1.74982611e+00, -1.88290287e-01,  5.40611790e+00, -6.82979118e+00,  1.42737624e+01, -8.68425778e+00, -8.64200552e+00, -4.56467258e+00, -4.92117827e+00, 1.31714011e+00,  3.73637253e+00, -4.96067357e+00, -5.49140663e+00]])
				]
	
	def getRestrainedNewWeights(self):
		# 33 hidden layers
		# Training rate: 0.05
		# Momentum: 0.1
		# Testing score: 3.42
		# Training score: 2.05
		
		return [
				np.array([[ 1.28107127e+00,  -2.50866358e-01,  -7.70813717e-02,
		          5.86088803e-01,  -1.81528220e-01,   6.14477582e-02,
		         -6.58753889e-02],
		       [ -2.57184868e+00,   3.93576665e+00,  -1.26149034e+01,
		         -3.66179352e+00,   1.44670491e+01,  -1.68015999e+00,
		          5.28767781e-01],
		       [ -1.58804629e+01,   1.48027346e+01,  -1.82924751e+00,
		         -1.69732124e-01,   5.50417229e+00,   1.73233814e-01,
		         -6.40740890e-01],
		       [ -3.61044147e+00,   1.26173848e+01,  -1.00906717e+00,
		         -5.26160516e-01,   5.38728246e+00,  -6.32077505e+00,
		         -1.46789574e+00],
		       [ -1.06566239e+01,   7.48004769e+00,   3.02209524e+00,
		         -7.12537910e+00,   3.99967808e+00,   7.50157561e+00,
		         -1.00150469e+00],
		       [ -2.09922646e+00,   3.52940090e+00,   7.21157037e-01,
		          1.60264695e+00,  -5.25117361e-01,   1.75696799e+00,
		         -1.25458253e+00],
		       [ -3.26854147e+00,   7.79945128e-01,  -1.36375334e+00,
		         -3.82706408e-01,   1.56292518e+00,   2.67137349e+00,
		          2.56889944e-02],
		       [ -1.00159690e+01,   1.00300063e+01,  -1.16777372e+01,
		         -2.82209911e+00,   1.70516447e+01,   7.98057646e+00,
		         -2.64156438e+00],
		       [  2.36183054e+00,  -9.62613704e-01,  -5.05346870e-01,
		          1.31643268e+00,  -1.23409504e+00,  -4.70267839e-01,
		          1.14960378e-02],
		       [  1.20585832e+01,  -8.96346054e+00,  -1.23770661e+00,
		         -8.73966164e+00,   1.11322299e+01,  -7.48222977e+00,
		          7.96615321e-01],
		       [ -2.58579721e+00,   2.35002335e+00,   9.47321990e-01,
		         -2.18293524e+00,   1.27813101e+00,   4.77519482e-02,
		         -1.71859841e-01],
		       [ -3.56463270e-01,   1.46427062e+00,  -9.09139431e-01,
		          4.29077087e+00,  -3.51564656e+00,  -1.03932241e+00,
		          1.05852845e-01],
		       [  4.40008115e+00,  -3.82056563e+00,  -2.37201422e+00,
		          3.27211050e+00,  -1.74829012e-01,  -1.65964185e+00,
		          2.75989792e-02],
		       [  1.03059314e+01,  -4.64676474e+00,   1.87951386e+01,
		         -7.46122015e+00,  -1.01158257e+00,  -1.07306956e+01,
		         -1.28636140e+00],
		       [ -6.40313670e+00,  -1.45941740e+00,   2.81970954e-01,
		         -3.56644567e+00,   7.42638874e+00,   4.11764870e+00,
		         -2.57496756e-02],
		       [  2.81578406e+00,  -3.58360064e+00,  -4.02496662e+00,
		          4.93810315e+00,   1.40954656e+00,  -1.63265823e+00,
		         -2.19087243e-02],
		       [  5.80503233e+00,  -5.22380287e+00,  -8.11440894e+00,
		          1.21754251e+01,  -9.36294441e+00,   8.60525453e-01,
		          1.13491105e+00],
		       [  1.17512410e+01,   9.06783871e+00,  -1.09276788e+01,
		         -2.78611222e+00,  -3.09594025e+00,   2.48971850e+00,
		         -1.59023658e+00],
		       [  1.59853145e+00,  -2.32311956e-01,  -9.79092458e-01,
		          2.04118346e+00,  -1.68156918e+00,  -4.44760258e-01,
		         -2.69098720e-02],
		       [  6.93443813e+00,   4.18076176e+00,   2.61017565e+00,
		         -1.24386117e+01,  -2.32253719e+00,  -1.66454745e+00,
		          8.43719060e-01],
		       [  4.18943835e-01,   8.35608641e-01,   5.39244875e-02,
		          1.23237457e+00,  -1.76949588e-02,   2.66743070e-01,
		         -6.38449300e-01],
		       [ -1.49621116e+00,   3.37301347e+00,   5.95924921e+00,
		         -4.96747475e+00,   4.44052015e-01,  -1.76747038e+00,
		         -3.52037562e-01],
		       [ -3.22434630e+00,   6.67874117e+00,  -5.17664076e+00,
		         -1.11304366e+01,   1.90183538e+01,  -2.23094012e-01,
		         -1.39323168e+00],
		       [ -1.55751515e+01,   1.75240637e+01,   3.85824362e+00,
		         -9.57409582e+00,  -9.19110140e-01,   8.83590672e+00,
		         -1.18697719e+00],
		       [ -2.30631789e+00,   1.32475113e+01,  -3.28478274e+00,
		         -1.17781935e+01,  -8.72797667e+00,   1.29110542e+01,
		          1.83004201e-01],
		       [ -9.22389317e-01,   1.72115766e+00,   1.18939250e+00,
		          2.56190072e-01,   3.19309249e-01,   1.29253301e+00,
		         -1.12629092e+00],
		       [  4.48912381e+00,  -5.82776482e+00,   6.52989325e+00,
		         -9.72006728e+00,   3.66653713e+00,  -3.43649582e-01,
		          1.67782080e-01],
		       [  1.89822228e+00,   8.56472305e+00,  -9.71179735e+00,
		          6.21868356e-02,   8.54414398e+00,  -6.00472589e+00,
		         -8.61155876e-01],
		       [  1.16744472e+00,  -3.66208564e-02,  -2.15082472e-01,
		          7.84952152e-01,  -2.17937778e-01,  -9.91810609e-02,
		         -1.15014096e-01],
		       [ -3.25124494e+00,   3.15849002e+00,   1.19358255e+00,
		         -9.52334872e-01,  -1.72860434e+00,   1.86580622e+00,
		         -7.53108850e-02],
		       [  5.46184082e+00,   4.82224700e-01,  -8.92907469e+00,
		          1.39145578e+01,  -8.26199805e+00,  -5.51409988e+00,
		          8.19954542e-01],
		       [ -3.76993788e+00,   2.01337094e+00,  -1.56563718e-01,
		         -2.18172351e+00,   2.90395889e+00,   1.35559492e+00,
		         -5.86605840e-02],
		       [  7.07957369e-01,   4.30642503e-01,   4.78243344e-01,
		          6.33275670e-01,   1.28536122e-01,   4.75192427e-01,
		         -7.44735541e-01]]),
			np.array([[ -1.01326569,   8.65834074,  -8.4516781 , -10.33925623,
		         -4.33328595,  -1.35420434,  -3.38529544, -10.16567475,
		         -1.20898885,   7.59767855,  -1.32997937,   3.38869378,
		         -3.12050049,  -5.74235272,   2.43528416,  -1.58423753,
		         -5.33098533,  -6.74410945,   0.2728549 ,  -8.32157272,
		         -0.64044207,   3.19363571,   2.3853336 ,   1.02658616,
		        -10.32618872,  -0.91112015,  -1.88540577,  -9.86088593,
		         -0.82450014,  -2.78470577,   9.74321016,  -2.72405856,
		         -0.9453964 ,  -0.52567052],
		       [ -0.58741152,  -3.79000291,   1.67379945,  15.03201154,
		         -6.16922758,  -1.78571359,  -1.28713933,  14.07333565,
		         -0.71953874,   1.74636161,  -1.29280794,   1.18421492,
		         -4.11705402,  -3.24345217,  -3.01630562,  -4.76140717,
		          6.98888052,   8.31870005,  -0.36691053,   7.52916953,
		         -0.02103025,  -2.9806681 ,  -6.47592012,  -3.02022041,
		          9.24081967,  -1.1599826 ,   3.94155488,   2.18291277,
		         -0.60965018,  -4.23805654,  -2.05644823,  -2.37515646,
		         -0.13559931,  -5.97921339],
		       [ -1.27145589,  -9.1843648 ,  -8.38404279,  -7.22023444,
		         -6.4782502 ,   0.13493784,   0.03677718,  -3.00544361,
		         -2.47687272,  -7.79605029,  -3.13682822,  -2.95998567,
		          0.58728825,  13.69371806,  -7.94813847,  -0.71675731,
		         -6.96679275,  -6.5822005 ,  -2.58252759,  -1.99551509,
		         -1.22579929,  -4.66759628,  -6.73598451, -12.21085789,
		          5.06429733,  -0.09836107,  -7.61656971,  10.7874057 ,
		         -1.38898417,   0.8901211 ,  -0.7670809 ,  -3.94773808,
		         -1.31162517,  12.3208654 ],
		       [ -0.12199234, -10.19219712,   8.06935235,   6.9182037 ,
		          2.30406498,   0.24799988,  -3.37224594,  -3.10677015,
		         -0.02090579,  -8.85714068,   0.89119597,  -3.21427397,
		          3.22807991, -12.88817591,  -2.60296851,   3.22849161,
		         -6.24018907,  12.64210081,  -0.83880417,   1.36770577,
		         -0.86057057,   1.3002273 ,   8.33254584,   8.61110381,
		         -5.88632128,  -0.19032465, -10.66967749,  -5.49616384,
		         -0.38647148,   2.19894426,  -6.6359804 ,  -0.13424704,
		         -0.12125402,  -8.02089844]])]
	
	def getMixed1Weights(self):
		return [
				np.array([[  1.49869284e+00,  -1.14224866e+01,   2.81753211e+00, 5.77644581e+00,   2.61263020e+00,  -1.33606287e+01, 2.90582901e+00],
       			 [ -3.34930569e+00,  -9.83930467e+00,   8.70804123e+00, -8.99472755e+00,   5.72803115e+00,   5.12939091e+00, 6.52518128e-01],
       			 [  9.16009985e+00,   6.57417965e+00,   1.51722719e+01, -2.29763170e+01,   4.99640655e+00,  -5.46781815e+00, -2.05780474e+00],
       			 [  5.59321819e-01,   4.81680093e-01,   1.48764227e+00, -3.36426748e-01,   1.24112609e+00,   4.03172415e-01, -1.15680724e+00],
       			 [  8.49017499e-02,  -3.74773140e+00,  -1.20578976e+01, 1.38949721e+01,  -7.43855268e+00,   1.88657359e+00, 1.74930378e+00],
       			 [  1.62679349e+00,  -5.98581197e+00,  -1.78137185e+01, 1.09643748e+01,   2.98182783e+00,  -9.27537743e-01, 2.33717425e+00],
       			 [ -6.63115623e+00,   2.01011003e+00,  -1.24793570e+00, -9.19004131e+00,   5.45832691e+00,   6.06952499e+00, 9.01107954e-01],
       			 [  7.10109006e+00,   9.23818570e+00,  -5.91491438e+00, 7.19573606e+00,  -1.98143878e+01,   1.86679157e+00, 3.06098520e-01],
       			 [  5.92469304e+00,  -8.72641660e-01,   2.63545073e+00, 8.00691449e+00,  -3.54998254e+00,  -7.74052284e+00, -1.22670348e+00],
       			 [  6.82235656e-01,  -1.65434250e+00,   1.38879403e+01, -7.80455292e+00,  -3.79804018e+00,   2.21858483e+00, -9.61103120e-01],
       			 [ -2.48167109e+01,   1.28438030e+01,   1.38182020e+01, -1.69230858e+01,   9.67849916e+00,   6.96930341e+00, -3.96801155e-01],
       			 [ -4.77692695e+00,  -5.49202998e+00,   2.14123180e+01, -1.20191088e+01,   5.81092113e+00,  -1.32349466e+01, 2.15706548e+00],
       			 [  8.64188949e+00,   1.33648713e+00,   8.90127473e+00, -1.72413798e+01,  -6.83449554e+00,   1.01231564e-01, 1.25056949e+00],
       			 [  1.77539499e+01,  -5.07680054e+00,   6.47373298e+00, -2.60808573e+01,   9.46268553e+00,   2.57344881e+00, -1.42128544e+00],
       			 [ -5.99970180e+00,  -5.67815685e+00,  -6.51143764e+00, 1.53666983e+01,   7.50820604e+00,   3.41980767e+00, -2.03276652e+00],
       			 [  9.12808338e+00,  -6.39605248e+00,   2.67725342e-01, 3.33123738e+00,  -4.92859847e+00,  -1.06078212e+00, 7.38653155e-03],
       			 [ -1.02870651e+01,   1.77897993e+00,  -3.17080244e+01, 2.11730231e+01,   2.23815963e+01,  -4.69217426e+00, 3.27184425e-01],
       			 [  9.70038345e+00,  -2.16333188e+01,   1.08648246e+01, -2.26508656e+00,   1.76739718e+01,  -1.41640745e+01, -1.42169066e-01],
       			 [  1.07818318e+01,   2.58578053e+00,  -1.49170825e+01, 8.08183654e-01,  -5.74769062e-01,   1.29609891e+01, -2.90271061e+00],
       			 [  9.38942618e+00,  -6.47762889e+00,  -1.74426221e+01, 1.32137176e+01,   3.28356850e+00,  -1.69143021e+00, -1.37911353e-02],
       			 [ -8.91030974e+00,   8.54744038e+00,   1.66297390e+00, 9.74280869e+00,   1.36603578e+01,  -1.28639457e+01, -3.14471034e+00],
       			 [ -1.32871770e+01,   8.70229086e+00,  -9.32440929e+00, -1.23238586e+00,   3.22091923e+00,   1.03832451e+01, 5.36448026e-01],
       			 [  1.55409219e+00,  -1.37433582e+01,  -2.09745016e+00, 6.87068179e+00,   1.27652175e+01,   5.14608330e-01, -1.45840358e+00]]), 
	   			np.array([[-17.55560532, -14.06334928,   9.1209529 ,  -1.60991588, 8.77813951,   9.16387727, -10.46800869, -11.57884233, -4.64342434,   7.5171728 ,   0.79221006,  10.22852189, 1.91423363,  11.24922546,  -5.41617537,  -4.62846847, 8.96347156,   3.52327158,  12.12612932,   2.5647254 , 15.27567342,  -9.37293277,  15.97661967,  -7.01936577],
       			 [ 15.73447201,   9.61203829, -11.32509828,   0.22279508, -9.22654189,  -6.92863116,   6.94563893, -10.00123817, 7.69131568,  -6.12322341, -11.9867817 ,  -9.75102198, -14.09880425,  -9.2353628 ,   7.35825189, -16.09645445, -8.10144382, -10.89882527,  -8.8323457 ,  -2.07172445, -13.17259355,   8.46721096, -10.02377965,   6.53057725]])
				]
	
	
	
		
		
	def addResult(self, bestScore, bestScoreTraining, initialWeights, bestIteration, bestWeights, config):
		if len(self.resultTestingScore) < 30:
			self.resultTestingScore.append(bestScore)
			self.resultTrainingScore.append(bestScoreTraining)
			self.resultInitialWeights.append(initialWeights)
			self.resultIteration.append(bestIteration)
			self.resultWeights.append(bestWeights)
			self.resultConfig.append(config)
		else:
			# Retrieve the worst score
			largest = heapq.nlargest(1, ((k, i) for i, k in enumerate(self.resultTestingScore)))
			
			if bestScore < largest[0][0]:
				self.resultTestingScore[largest[0][1]] = bestScore
				self.resultTrainingScore[largest[0][1]] = bestScoreTraining
				self.resultInitialWeights[largest[0][1]] = initialWeights
				self.resultIteration[largest[0][1]] = bestIteration
				self.resultWeights[largest[0][1]] = bestWeights
				self.resultConfig[largest[0][1]] = config
				
				
				
				
				
				
		
	def displayResults(self, signum, frame):
		print
		print
		print
		
		# Retrieve the 20 best results
		best = heapq.nsmallest(20, ((k, i) for i, k in enumerate(self.resultTestingScore)))
		
		# Display their informations
		i = 1
		for b in best:
			print
			print "###############"
			print "#{0} Result:".format(i)
			i+=1
			
			print "{0} Hidden layers, \tTraining rate: {1}, \tMomentum: {2}".format(self.resultConfig[b[1]][0], self.resultConfig[b[1]][1], self.resultConfig[b[1]][2])
			print "The best weights were for a score of {0:0.6f} at iteration {1} while training was at {2:0.6f}:".format(b[0], self.resultIteration[b[1]], self.resultTrainingScore[b[1]])
			print self.resultWeights[b[1]]
			
			print
			print "Initial weights:"
			print self.resultInitialWeights[b[1]]
		sys.exit(1)
	
	def run(self):
		# store the original SIGINT handler to display the results if interrupted
		original_sigint = signal.getsignal(signal.SIGINT)
		signal.signal(signal.SIGINT, self.displayResults)
		
		
		
		# Get the inputs and outputs
		lvTrainingInputOriginal = np.array(self.trainingInput)
		lvTrainingTargetOriginal = np.array(self.trainingTarget)
		
		lvTestingInputOriginal = np.array(self.testingInput)
		lvTestingTargetOriginal = np.array(self.testingTarget)
		
		# Define the functions that will be used
		lFuncs = [None, gaussian, sgm]
		
		
		# For research purpose, the number of hidden layers will be incremented or repeated
		ran = np.arange(33, 50)
		#ran = np.repeat(np.array([23, 26, 27, 32, 36]), 10)
		
		
		# Set the settings
		trainingRate = 0.05
		momentum = 0.1
		
		
		# Loop to change the number of hidden layers
		for hidden in ran:
			
			rate = np.arange(trainingRate, 1, 0.05)
			for trainingRate in rate:
				
				mom = np.arange(momentum, 1.0, 0.1)
				for momentum in mom:
					
					for repeat in range(5):
						
					
						print("{0} hidden layers with a training rate of {1} and a momentum of {2}".format(hidden, trainingRate, momentum))
			        	
			        	
						# Make a copy of the inputs and the outputs
						lvTrainingInput = deepcopy(lvTrainingInputOriginal)
						lvTrainingTarget = deepcopy(lvTrainingTargetOriginal)
		            	
						lvTestingInput = deepcopy(lvTestingInputOriginal)
						lvTestingTarget = deepcopy(lvTestingTargetOriginal)
			        	
			        	
						# Create a new networl instance
						bpn = BackPropagationNetwork((len(self.trainingInput[0]), hidden, len(self.trainingTarget[0])), lFuncs)
						#bpn.setWeights(self.plop())
			        	
						# Set our goals
						lnMax = 100000
						lnErr = 0.002
						errMax = 1e100
			        	
						# Will hold the weights for the best score of the run
						bestScore = 9000.0
						bestScoreTraining = 9000.0
						bestWeights = []
						initialWeights = []
						bestIteration = 0
						
						# Get the initial weights
						initialWeights = bpn.getWeights()
			        	
						for i in range(lnMax+1):
							err = bpn.trainEpoch(lvTrainingInput, lvTrainingTarget, trainingRate, momentum)
							
				    	
							# Get the result for the current weights against the testing dataset
							self.bpnTesting.setWeights(bpn.getWeights())
							testingResult = self.bpnTesting.run(lvTestingInput)
		            	
							output_delta = self.bpnTesting._layerOutput[self.bpnTesting.layerCount-1]-lvTestingTarget.T
							error = np.sum(output_delta**2)
				    	
							if error < bestScore:
								bestScore = error
								bestScoreTraining = err
								bestWeights = bpn.getWeights()
								bestIteration = i
						
				    	
							if i%500 == 0:
								print("Iteration {0}\tError: {1:0.6f}  \t{2:0.6f}".format(i, err, error))
							if error <= lnErr:
								print("Minimum error reached at iteration {0} with {1:0.6f}  \t{2:0.6f}".format(i, err, error))
								break
							if error >= errMax:
								print("Will not converge past iteration {0} with {1:0.6f}  \t{2:0.6f}".format(i, err, error))
								break
		            	
						# Display output
						print 
						print("Stopped at Iteration {0}\tError: {1:0.6f}  \t{2:0.6f}".format(i, err, error))
			        	
			        	
						# Keep this result if it is good
						self.addResult(bestScore, bestScoreTraining, initialWeights, bestIteration, bestWeights, [hidden, trainingRate, momentum])
			        	
			        	
			        	
			        	
			        	
			        	
			        	
						#
						#
						#
						#
						#print
						#print "training output:"
						#
						#output = bpn.run(lvTrainingInput)
						#for i in range(lvTrainingInput.shape[0]):
						#	print("Ouput {0}: {1}".format(i, output[i]))
						#
						#print
						#print "testing output:"
						#
						#output = bpn.run(lvTestingInput)
						#for i in range(lvTestingInput.shape[0]):
						#	print("Ouput {0}: {1}".format(i, output[i]))
				    	#
						#print
						#print
			        	
						print "The best weights for a score of {0:0.6f} at iteration {1} while training was at  {2:0.6f}:".format(bestScore, bestIteration, bestScoreTraining)
						print
						#print bestWeights
			        	
						#print
						#print "The initial weights were:"
						#print initialWeights
			
			
			
			
		self.displayResults(None, None)
			
	def plop(self):
		return [np.array([[  9.16821230e-01,  -6.09576216e-01,  -1.01610164e+00,
         -1.51784111e+00,  -1.03165647e+00,   3.09431812e+00,
          3.29916603e-01],
       [ -2.39959737e+00,   6.66689154e+00,  -1.40112041e+01,
         -4.94692255e+00,   1.67765344e+01,  -4.03798774e+00,
          4.85366771e-01],
       [ -1.79843389e+01,   1.61073826e+01,  -1.39310457e+00,
         -8.23318613e-01,   6.29806806e+00,   8.90932646e-01,
         -7.64471673e-01],
       [ -4.27226287e+00,   1.05656723e+01,   1.91868571e-01,
          2.01113768e+00,   7.50118407e+00,  -8.57193689e+00,
         -1.68975570e+00],
       [ -1.26609208e+01,   6.56579039e+00,   4.98841849e+00,
         -7.38533483e+00,   4.68893528e+00,   7.14487376e+00,
         -7.81596851e-01],
       [ -2.09587543e+00,   3.53046782e+00,   7.24953766e-01,
          1.60725544e+00,  -5.21213127e-01,   1.75860711e+00,
         -1.25917416e+00],
       [ -3.71097031e+00,   1.57689848e+00,  -7.91779106e+00,
          2.96248199e+00,  -5.20826865e+00,   1.00174349e+01,
          5.95553315e-01],
       [ -1.09989408e+01,   1.14357594e+01,  -1.19795018e+01,
         -3.52447123e+00,   1.83580100e+01,   8.23328167e+00,
         -2.88599315e+00],
       [  3.24150393e+00,  -1.67076373e+00,  -5.23394148e-01,
          1.48872304e+00,  -2.14499523e+00,   7.94470259e-02,
          2.03507547e-02],
       [  1.37084027e+01,  -1.00823959e+01,  -1.21557372e+00,
         -8.57511850e+00,   1.14829166e+01,  -9.51655249e+00,
          1.03813428e+00],
       [ -2.05007701e+00,   4.02821786e+00,   2.91320740e+00,
         -3.05913423e+00,   2.19337640e+00,  -3.27204303e+00,
         -3.96622726e-01],
       [ -4.03963711e+00,   2.57362296e+00,   4.95888470e-01,
          7.58479716e+00,  -7.42082964e+00,   9.29325500e-01,
          5.86784654e-02],
       [  5.19535651e+00,  -2.64170315e+00,  -2.99358811e+00,
          2.77118678e+00,  -6.04094685e-01,  -2.39602486e+00,
          1.06101090e-01],
       [  1.43032510e+01,  -4.68743971e+00,   1.73519271e+01,
         -1.10351329e+01,   1.69389470e+00,  -1.71693380e+01,
         -8.79501985e-02],
       [ -7.46117914e+00,  -2.20949995e+00,   6.55407880e-01,
         -3.50445521e+00,   8.27837113e+00,   4.75417288e+00,
         -5.47019174e-02],
       [  2.14755741e+00,  -2.70174365e+00,  -5.69114821e+00,
          7.07550836e+00,   2.55297072e-01,  -1.28539189e+00,
          8.62357160e-03],
       [  6.13106255e+00,  -5.52938753e+00,  -9.79891509e+00,
          1.37804405e+01,  -9.95459237e+00,   1.36852580e+00,
          1.17058426e+00],
       [  1.16412278e+01,   9.18191393e+00,  -1.12225469e+01,
         -2.64158986e+00,  -3.10200219e+00,   2.87867230e+00,
         -1.64938860e+00],
       [  1.81259420e+00,  -6.08184833e-02,  -1.80376344e+00,
          2.66409397e+00,  -2.46160290e+00,   9.33769138e-02,
         -1.23846702e-02],
       [  9.86031936e+00,   3.02173558e+00,   3.79471026e+00,
         -1.53667810e+01,  -1.12912053e+00,  -3.91857226e+00,
          1.10306601e+00],
       [  4.14994356e-01,   8.19667459e-01,   3.72679181e-02,
          1.22492224e+00,  -2.42784227e-02,   2.48574411e-01,
         -6.21261380e-01],
       [  1.81153128e+00,   5.58821271e+00,   1.42183212e+01,
         -8.66532389e+00,   3.86394026e+00,  -1.12785589e+01,
         -1.35027862e+00],
       [ -4.64344338e+00,   7.66362266e+00,  -3.55543000e+00,
         -1.39737750e+01,   1.95604815e+01,   1.88781501e+00,
         -1.64240506e+00],
       [ -1.57694579e+01,   1.94772819e+01,   1.49725940e+00,
         -9.43357238e+00,   1.16466476e+00,   7.90997152e+00,
         -1.36104988e+00],
       [ -2.17707878e+00,   1.44321392e+01,  -5.88540348e+00,
         -1.20863482e+01,  -9.13825273e+00,   1.45640780e+01,
          2.71044364e-01],
       [ -9.20018534e-01,   1.72144405e+00,   1.19439537e+00,
          2.60830027e-01,   3.23054802e-01,   1.29242991e+00,
         -1.13027653e+00],
       [  3.33401597e+00,  -7.01578988e+00,   7.45504544e+00,
         -9.09882208e+00,   3.65247844e+00,   6.05013513e-01,
          1.33314857e-01],
       [  2.86938072e+00,   8.53444074e+00,  -9.63086280e+00,
          5.79346207e-01,   8.20538434e+00,  -7.49274142e+00,
         -7.89204596e-01],
       [  1.97739154e+00,  -4.03445249e-01,  -6.35377685e-01,
          1.26658197e+00,  -6.30132375e-01,  -3.34869640e-01,
         -7.91575590e-02],
       [ -4.74769548e+00,   3.96213805e+00,  -8.95075120e-01,
          1.03771094e+00,  -1.81085591e+00,   3.10701485e+00,
         -1.67196558e-01],
       [  6.18735972e+00,  -1.12255841e-01,  -9.62124162e+00,
          1.45796743e+01,  -8.22737889e+00,  -5.99632945e+00,
          9.05860170e-01],
       [ -4.31835175e+00,   2.98721578e+00,  -5.29163347e-01,
         -2.14395212e+00,   3.51452038e+00,   3.00355745e-01,
          2.98581548e-02],
       [  7.10490193e-01,   4.24108933e-01,   4.73739559e-01,
          6.31643677e-01,   1.26243973e-01,   4.70535089e-01,
         -7.40464038e-01]]), np.array([[ -1.67927842,   8.54622088,  -8.60213501, -12.7698285 ,
         -3.88520377,  -1.35345178,  -4.6900627 , -12.43362509,
         -1.58137407,   8.58145055,  -0.07281086,   6.45928137,
         -4.85478598,  -5.78269512,   2.31172322,  -2.97214419,
         -5.20012074,  -7.17320907,   0.69042782,  -9.90930085,
         -0.63718768,   0.07330444,   1.00506786,   4.87253469,
        -12.86149419,  -0.91018503,  -0.58714418, -11.59409374,
         -0.9860967 ,  -4.68410659,  10.48109116,  -3.36544174,
         -0.94537841,  -2.37626128],
       [ -2.12422663,  -3.91394287,   2.06279104,  15.67226016,
         -6.53729211,  -1.7858478 ,  -2.77051089,  15.69926335,
         -0.41823031,   3.01888271,  -1.04221638,   2.87470304,
         -4.48003322,  -3.57885167,  -1.94869633,  -6.23338304,
          7.75789471,   9.73022964,   0.13442946,   9.1115365 ,
         -0.02106519,  -1.84771421,  -8.33884056,  -3.59856162,
         10.41348346,  -1.1600764 ,   2.8075752 ,   1.82440163,
         -0.43899892,  -4.27936439,  -3.91986283,  -2.47265234,
         -0.13561933,  -7.14658744],
       [ -2.67170061, -11.75058   ,  -9.66436098, -10.0053802 ,
         -4.41232795,   0.13491398,   5.9169031 ,  -4.93161911,
         -4.11298038,  -9.61743966,  -5.59228127,  -6.35747186,
          1.1909878 ,  13.60933403, -10.86369512,  -1.70019057,
         -7.55699333,  -7.39710427,  -4.36492929,  -1.25306765,
         -1.22757873, -11.29683283,  -8.10709968, -14.52878668,
          4.77431531,  -0.09825825,  -8.91048539,  11.47592262,
         -2.0339816 ,  -1.3518466 ,   0.0363097 ,  -5.99218419,
         -1.31229601,  16.13970211],
       [ -0.52367206, -10.29956823,  10.59356434,  11.45296512,
          2.12998559,   0.24799918,  -7.699861  ,  -3.1232179 ,
          1.74727399,  -9.05077786,   3.39689337,  -5.60730628,
          2.51992884, -11.09607305,  -4.03861771,   3.49999554,
         -7.23339797,  14.2605844 ,   0.05095487,   1.75518205,
         -0.86472109,  10.24324172,   7.96291082,  10.80464515,
         -5.8189822 ,  -0.19050438, -12.50662113,  -5.01116324,
         -0.03661645,   4.00265385,  -5.80763631,   0.45384937,
         -0.12153206, -14.37323255]])]
		
	def test(self, data, validating=False, light=True):
		# First, retrieve the features from the input
		if not validating:
			lvInput = np.array(self.getFeaturesLive(data))
		elif light:
			lvInput = np.array([self.getFeaturesLight(data)])
		else:
			lvInput = np.array([self.getFeaturesFull(data)])
		
		# Then, run the network
		lvOutput = self.bpnValidating.run(lvInput)
		
		result = [False,0]
		for i in range(lvInput.shape[0]):
			# If a gesture is recognised:
			if lvOutput[i][np.argmax(lvOutput[i])] > 0.5:
				result = [True, i]
		return result