#! /usr/bin/python -W ignore::FutureWarning
from classes.BackPropagationNetwork import *
import numpy as np
import sys
from copy import deepcopy
import signal
import heapq


class BPNHandler:
	
	# Hold eventual results
	resultTestingScore, resultTrainingScore, resultInitialWeights, resultWeights, resultConfig, resultIteration = [], [], [], [], [], []
	
	
	def __init__(self, live=False, features=6, hiddenLayers=20, output=12):
		# Define the functions that will be used
		self.lFuncs = [None, gaussian, sgm]
		
		# Initialise the right network
		if live:
			self.bpnValidating = BackPropagationNetwork((features, hiddenLayers, output), self.lFuncs)
			self.bpnValidating.setWeights(self.getWeights())
		else:
			self.bpnTesting = BackPropagationNetwork((features, hiddenLayers, output), self.lFuncs)
	
	
	def check(self, features):
		lvInput = np.array(features)
		lvOutput = self.bpnValidating.run(lvInput)
		
		# The output will be an array whose first element indicates if a pointing gesture is recognised
		# In case of a pointing gesture, the second value represent the left (0) or right (1) hand
		result = [False,0]
		
		# Possibility to get an unified result for several feature inputs
		for i in range(lvInput.shape[0]):
			# If a gesture is recognised:
			if lvOutput[i][np.argmax(lvOutput[i])] > 0.5:
				result = [True, i]
		
		return result
	
	
	def run(self, trainingInput, trainingTarget, testingInput, testingTarget, learningRate=0.05, momentum=0.1, optimal=False):
		# store the original SIGINT handler to display the results if interrupted
		original_sigint = signal.getsignal(signal.SIGINT)
		signal.signal(signal.SIGINT, self.displayResults)
		
		# Get the inputs and outputs
		lvTrainingInputOriginal = np.array(trainingInput)
		lvTrainingTargetOriginal = np.array(trainingTarget)
		
		lvTestingInputOriginal = np.array(testingInput)
		lvTestingTargetOriginal = np.array(testingTarget)
		
		
		# For research purpose, the number of hidden layers will be dynamic
		#ran = np.arange(2, 50)
		ran = np.tile([22], 20)
		
		# Loop the number of hidden layers
		for hidden in ran:
			
			
			# For optimal research purpose, the learningRate can be dynamic
			if optimal:
				rate = np.arange(learningRate, 0.1, 0.05)
			else:
				rate = [learningRate]
			
			# Loop the number of Learning rates
			for locallearningRate in rate:
				
				
				# For optimal research purpose, the momentum can be dynamic
				if optimal:
					mom = np.arange(momentum, 0.2, 0.1)
				else:
					mom = [momentum]
			
				# Loop the number of momentums
				for localMomentum in mom:
					
					
					# For optimal research purpose, the network can be ran several times
					if optimal:
						repeatition = range(3)
						#repeatition = [1]
					else:
						repeatition = [1]
					
					# Loop the number of repeatitions
					for repeat in repeatition:
						
					
						print("{0} hidden layers with a Learning rate of {1} and a momentum of {2}".format(hidden, locallearningRate, localMomentum))
			        	
			        	
						# Make a copy of the inputs and the outputs
						lvTrainingInput = deepcopy(lvTrainingInputOriginal)
						lvTrainingTarget = deepcopy(lvTrainingTargetOriginal)
		            	
						lvTestingInput = deepcopy(lvTestingInputOriginal)
						lvTestingTarget = deepcopy(lvTestingTargetOriginal)
			        	
			        	
						# Create a new network instance
						bpn = BackPropagationNetwork((len(trainingInput[0]), hidden, len(trainingTarget[0])), self.lFuncs)
			        	
						# Set our goals
						lnMax = 100000
						lnErr = 0.002
						errMax = 1e100
						sameLimit = 25
			        	
						# Will hold the weights for the best score of the run
						bestScore = 9000.0
						bestScoreTraining = 9000.0
						bestWeights = []
						initialWeights = []
						bestIteration = 0
						previous = 9000.0
						same = 0
						
						# Get the initial weights
						initialWeights = bpn.getWeights()
			        	
						# Start training!
						for i in range(lnMax+1):
							err = bpn.trainEpoch(lvTrainingInput, lvTrainingTarget, locallearningRate, localMomentum)
							
				    	
							# Get the result for the current weights against the testing dataset
							self.bpnTesting.setWeights(bpn.getWeights())
							testingResult = self.bpnTesting.run(lvTestingInput)
		            		
							# Process the error on the testing dataset
							output_delta = self.bpnTesting._layerOutput[self.bpnTesting.layerCount-1]-lvTestingTarget.T
							error = np.sum(output_delta**2)
				    		
							# Keep track of this result if it is the best
							if error < bestScore:
								bestScore = error
								bestScoreTraining = err
								bestWeights = bpn.getWeights()
								bestIteration = i
							
				    		
							# Display some informations or stop the current training if necessary
							if i%500 == 0:
								print("Iteration {0}\tError: {1:0.6f}  \t{2:0.6f}".format(i, err, error))
								
								# Check that the network is not stuck
								if "{0:0.6f}".format(error) == "{0:0.6f}".format(previous):
									same += 1
								else:
									same = 0
									previous = error
								
								if same == sameLimit:
									print("Network stuck with {1:0.6f}  \t{2:0.6f}".format(i, err, error))
									break
								
							if error <= lnErr:
								print("Minimum error reached at iteration {0} with {1:0.6f}  \t{2:0.6f}".format(i, err, error))
								break
							if error >= errMax:
								print("Will not converge past iteration {0} with {1:0.6f}  \t{2:0.6f}".format(i, err, error))
								break
		            	
						# Display output
						print 
						print("Stopped at Iteration {0}\tError: {1:0.6f}  \t{2:0.6f}".format(i, err, error))
			        	
			        	
						# Keep this result if it is good
						self.addResult(bestScore, bestScoreTraining, initialWeights, bestIteration, bestWeights, [hidden, locallearningRate, localMomentum])
			        	
						print "The best weights for a score of {0:0.6f} at iteration {1} while training was at  {2:0.6f}:".format(bestScore, bestIteration, bestScoreTraining)
						print
		
		# If all loops have finished, display the results (any interuption during the process will call this function anyways...)
		self.displayResults(None, None)
	
	
	def addResult(self, bestScore, bestScoreTraining, initialWeights, bestIteration, bestWeights, config):
		if len(self.resultTestingScore) < 30:
			self.resultTestingScore.append(bestScore)
			self.resultTrainingScore.append(bestScoreTraining)
			self.resultInitialWeights.append(initialWeights)
			self.resultIteration.append(bestIteration)
			self.resultWeights.append(bestWeights)
			self.resultConfig.append(config)
		else:
			# Retrieve the worst score
			largest = heapq.nlargest(1, ((k, i) for i, k in enumerate(self.resultTestingScore)))
			
			if bestScore < largest[0][0]:
				self.resultTestingScore[largest[0][1]] = bestScore
				self.resultTrainingScore[largest[0][1]] = bestScoreTraining
				self.resultInitialWeights[largest[0][1]] = initialWeights
				self.resultIteration[largest[0][1]] = bestIteration
				self.resultWeights[largest[0][1]] = bestWeights
				self.resultConfig[largest[0][1]] = config
	
	
	def displayResults(self, signum, frame):
		print
		print
		print
		
		# Retrieve the 20 best results
		best = heapq.nsmallest(20, ((k, i) for i, k in enumerate(self.resultTestingScore)))
		
		# Display their informations
		i = 1
		for b in best:
			print
			print "###############"
			print "#{0} Result:".format(i)
			i+=1
			
			print "{0} Hidden layers, \tLearning rate: {1}, \tMomentum: {2}".format(self.resultConfig[b[1]][0], self.resultConfig[b[1]][1], self.resultConfig[b[1]][2])
			print "The best weights were for a score of {0:0.6f} at iteration {1} while training was at {2:0.6f}:".format(b[0], self.resultIteration[b[1]], self.resultTrainingScore[b[1]])
			print self.resultWeights[b[1]]
			
			print
			print "Initial weights:"
			print self.resultInitialWeights[b[1]]
		sys.exit(1)
	
	
	def getRestrainedWeights(self):
		# 6 features
		# 4 outputs
		# 33 hidden layers
		# Learning rate: 0.05
		# Momentum: 0.1
		# Testing score: 3.42
		# Training score: 2.05
		# Validating score: 85.6 %
		
		return [
			np.array([[ 1.28107127e+00, -2.50866358e-01, -7.70813717e-02, 5.86088803e-01, -1.81528220e-01, 6.14477582e-02, -6.58753889e-02],
		       [ -2.57184868e+00, 3.93576665e+00, -1.26149034e+01, -3.66179352e+00, 1.44670491e+01, -1.68015999e+00, 5.28767781e-01],
		       [ -1.58804629e+01, 1.48027346e+01, -1.82924751e+00, -1.69732124e-01, 5.50417229e+00, 1.73233814e-01, -6.40740890e-01],
		       [ -3.61044147e+00, 1.26173848e+01, -1.00906717e+00, -5.26160516e-01, 5.38728246e+00, -6.32077505e+00, -1.46789574e+00],
		       [ -1.06566239e+01, 7.48004769e+00, 3.02209524e+00, -7.12537910e+00, 3.99967808e+00, 7.50157561e+00, -1.00150469e+00],
		       [ -2.09922646e+00, 3.52940090e+00, 7.21157037e-01, 1.60264695e+00, -5.25117361e-01, 1.75696799e+00, -1.25458253e+00],
		       [ -3.26854147e+00, 7.79945128e-01, -1.36375334e+00, -3.82706408e-01, 1.56292518e+00, 2.67137349e+00, 2.56889944e-02],
		       [ -1.00159690e+01, 1.00300063e+01, -1.16777372e+01, -2.82209911e+00, 1.70516447e+01, 7.98057646e+00, -2.64156438e+00],
		       [  2.36183054e+00, -9.62613704e-01, -5.05346870e-01, 1.31643268e+00, -1.23409504e+00, -4.70267839e-01, 1.14960378e-02],
		       [  1.20585832e+01, -8.96346054e+00, -1.23770661e+00, -8.73966164e+00, 1.11322299e+01, -7.48222977e+00, 7.96615321e-01],
		       [ -2.58579721e+00, 2.35002335e+00, 9.47321990e-01, -2.18293524e+00, 1.27813101e+00, 4.77519482e-02, -1.71859841e-01],
		       [ -3.56463270e-01, 1.46427062e+00, -9.09139431e-01, 4.29077087e+00, -3.51564656e+00, -1.03932241e+00, 1.05852845e-01],
		       [  4.40008115e+00, -3.82056563e+00, -2.37201422e+00, 3.27211050e+00, -1.74829012e-01, -1.65964185e+00, 2.75989792e-02],
		       [  1.03059314e+01, -4.64676474e+00, 1.87951386e+01, -7.46122015e+00, -1.01158257e+00, -1.07306956e+01, -1.28636140e+00],
		       [ -6.40313670e+00, -1.45941740e+00, 2.81970954e-01, -3.56644567e+00, 7.42638874e+00, 4.11764870e+00, -2.57496756e-02],
		       [  2.81578406e+00, -3.58360064e+00, -4.02496662e+00, 4.93810315e+00, 1.40954656e+00, -1.63265823e+00, -2.19087243e-02],
		       [  5.80503233e+00, -5.22380287e+00, -8.11440894e+00, 1.21754251e+01, -9.36294441e+00, 8.60525453e-01, 1.13491105e+00],
		       [  1.17512410e+01, 9.06783871e+00, -1.09276788e+01, -2.78611222e+00, -3.09594025e+00, 2.48971850e+00, -1.59023658e+00],
		       [  1.59853145e+00, -2.32311956e-01, -9.79092458e-01, 2.04118346e+00, -1.68156918e+00, -4.44760258e-01, -2.69098720e-02],
		       [  6.93443813e+00, 4.18076176e+00, 2.61017565e+00, -1.24386117e+01, -2.32253719e+00, -1.66454745e+00, 8.43719060e-01],
		       [  4.18943835e-01, 8.35608641e-01, 5.39244875e-02, 1.23237457e+00, -1.76949588e-02, 2.66743070e-01, -6.38449300e-01],
		       [ -1.49621116e+00, 3.37301347e+00, 5.95924921e+00, -4.96747475e+00, 4.44052015e-01, -1.76747038e+00, -3.52037562e-01],
		       [ -3.22434630e+00, 6.67874117e+00, -5.17664076e+00, -1.11304366e+01, 1.90183538e+01, -2.23094012e-01, -1.39323168e+00],
		       [ -1.55751515e+01, 1.75240637e+01, 3.85824362e+00, -9.57409582e+00, -9.19110140e-01, 8.83590672e+00, -1.18697719e+00],
		       [ -2.30631789e+00, 1.32475113e+01, -3.28478274e+00, -1.17781935e+01, -8.72797667e+00, 1.29110542e+01, 1.83004201e-01],
		       [ -9.22389317e-01, 1.72115766e+00, 1.18939250e+00, 2.56190072e-01, 3.19309249e-01, 1.29253301e+00, -1.12629092e+00],
		       [  4.48912381e+00, -5.82776482e+00, 6.52989325e+00, -9.72006728e+00, 3.66653713e+00, -3.43649582e-01, 1.67782080e-01],
		       [  1.89822228e+00, 8.56472305e+00, -9.71179735e+00, 6.21868356e-02, 8.54414398e+00, -6.00472589e+00, -8.61155876e-01],
		       [  1.16744472e+00, -3.66208564e-02, -2.15082472e-01, 7.84952152e-01, -2.17937778e-01, -9.91810609e-02, -1.15014096e-01],
		       [ -3.25124494e+00, 3.15849002e+00, 1.19358255e+00, -9.52334872e-01, -1.72860434e+00, 1.86580622e+00, -7.53108850e-02],
		       [  5.46184082e+00, 4.82224700e-01, -8.92907469e+00, 1.39145578e+01, -8.26199805e+00, -5.51409988e+00, 8.19954542e-01],
		       [ -3.76993788e+00, 2.01337094e+00, -1.56563718e-01, -2.18172351e+00, 2.90395889e+00, 1.35559492e+00, -5.86605840e-02],
		       [  7.07957369e-01, 4.30642503e-01, 4.78243344e-01, 6.33275670e-01, 1.28536122e-01, 4.75192427e-01, -7.44735541e-01]]),
			np.array([[ -1.01326569, 8.65834074, -8.4516781 , -10.33925623, -4.33328595, -1.35420434, -3.38529544, -10.16567475, -1.20898885, 7.59767855, -1.32997937, 3.38869378, -3.12050049, -5.74235272, 2.43528416, -1.58423753, -5.33098533, -6.74410945, 0.2728549 , -8.32157272, -0.64044207, 3.19363571, 2.3853336 , 1.02658616, -10.32618872, -0.91112015, -1.88540577, -9.86088593, -0.82450014, -2.78470577, 9.74321016, -2.72405856, -0.9453964 , -0.52567052],
		       [ -0.58741152, -3.79000291, 1.67379945, 15.03201154, -6.16922758, -1.78571359, -1.28713933, 14.07333565, -0.71953874, 1.74636161, -1.29280794, 1.18421492, -4.11705402, -3.24345217, -3.01630562, -4.76140717, 6.98888052, 8.31870005, -0.36691053, 7.52916953, -0.02103025, -2.9806681 , -6.47592012, -3.02022041, 9.24081967, -1.1599826 , 3.94155488, 2.18291277, -0.60965018, -4.23805654, -2.05644823, -2.37515646, -0.13559931, -5.97921339],
		       [ -1.27145589, -9.1843648 , -8.38404279, -7.22023444, -6.4782502 , 0.13493784, 0.03677718, -3.00544361, -2.47687272, -7.79605029, -3.13682822, -2.95998567, 0.58728825, 13.69371806, -7.94813847, -0.71675731, -6.96679275, -6.5822005 , -2.58252759, -1.99551509, -1.22579929, -4.66759628, -6.73598451, -12.21085789, 5.06429733, -0.09836107, -7.61656971, 10.7874057 , -1.38898417, 0.8901211 , -0.7670809 , -3.94773808, -1.31162517, 12.3208654 ],
		       [ -0.12199234, -10.19219712, 8.06935235, 6.9182037 , 2.30406498, 0.24799988, -3.37224594, -3.10677015, -0.02090579, -8.85714068, 0.89119597, -3.21427397, 3.22807991, -12.88817591, -2.60296851, 3.22849161, -6.24018907, 12.64210081, -0.83880417, 1.36770577, -0.86057057, 1.3002273 , 8.33254584, 8.61110381, -5.88632128, -0.19032465, -10.66967749, -5.49616384, -0.38647148, 2.19894426, -6.6359804 , -0.13424704, -0.12125402, -8.02089844]])]
	
	
	
	
	
	def getOriginalDataWeights(self):
		# 7 features
		# 21 outputs
		# 16 hidden layers
		# Learning rate: 0.05
		# Momentum: 0.1
		
		# Testing error: 3.54
		# Training error: 19.78
		
		# Testing score: 89.66 %
		# Training score: 88.34 %
		# Validating score: 81.25 %
		# Accuracy score: 34.86 %
		
		return [
			np.array([[  4.35598257, -5.5364802 , 6.41109233, 4.19672984,
				   8.29915105, -6.28334337, 3.95802049, -2.78434294],
				[ -2.75675568, 1.11387589, 2.862887  , -3.19875303,
				  -1.04278026, -3.53266528, 4.27216037, 0.03808543],
				[  0.62707397, 2.49768371, 0.48075136, -4.58186917,
				   8.11893045, -7.70979417, 0.94065554, 0.35477919],
				[ -1.04332055, -3.90787981, -10.33164251, -3.11118598,
				  10.79792778, -2.26020244, 2.67998531, 1.54474321],
				[  0.37688791, -0.81307261, -0.5176124 , -0.60310819,
				  -0.99685902, -0.59499052, -0.58343086, 0.96170795],
				[  2.71720875, -5.65566459, 2.99470949, -1.18993201,
				 -10.63576886, 14.00822658, 2.97958149, -0.46795789],
				[ -4.53748797, 5.05805156, -8.05888065, -4.62908065,
				   3.56984852, 6.59817445, -1.50604978, -0.12313627],
				[  3.90596373, 1.33109063, -1.12061198, -1.93453193,
				   3.19277898, -1.80817637, -1.62435547, 0.69827291],
				[ -2.15966982, -4.85887288, 2.24589581, -2.51558112,
				  -2.82137594, -4.05483145, 3.15521707, 2.32794945],
				[ -0.74822987, -4.10318866, 4.21704587, 2.53256514,
				  -3.76204764, -6.85732357, 7.65587298, -0.03211241],
				[ -2.31943032, -2.99444876, 2.54750786, -0.63626873,
				  -4.45834968, -2.94148538, 1.1150057 , 1.75031311],
				[  0.41429493, -0.91951847, -0.54982784, -0.65496765,
				  -0.75913198, -0.63863564, -0.75128009, 1.2186321 ],
				[  1.80872462, 1.72047431, -0.26307306, 6.68664921,
				 -12.46644456, 4.94194669, -1.7917309 , 0.16857966],
				[  0.44452168, -9.99944277, -2.52952175, 0.48151575,
				   2.85258284, 3.16865653, 6.21593204, 0.02847669],
				[  0.01482906, -0.66043718, -0.11147336, -1.25737669,
				  -0.93948763, -1.10021456, -0.92612288, 0.97924637],
				[  1.69749486, 9.351732  , -7.03584587, 1.41634131,
				  -3.17583197, 0.81304865, -1.48990646, -0.04245472]]), 
			np.array([[  1.88367898e-01, -8.41733653e+00, -3.31247935e-01,
				  -4.20218959e+00, -2.05823680e+00, 2.38686688e+00,
				   6.51236548e-01, -2.58767685e+00, -9.19936598e-01,
				   1.91635599e+00, -1.90202624e+00, -1.73455738e+00,
				  -5.24299840e+00, -6.87890679e+00, -2.01615636e+00,
				  -3.65465425e-01, -3.58663814e+00],
				[ -2.95802733e+00, -5.42312820e-01, 4.35833330e+00,
				  -1.21466010e+01, -2.22721312e+00, -1.37544788e+01,
				  -9.43700998e+00, -1.36083357e+01, -3.62474716e-01,
				  -1.40670735e+00, -3.98962616e+00, -1.73556992e+00,
				  -2.15934290e+01, -1.61559045e+01, -1.44403738e+00,
				  -1.07266951e+00, -2.65357145e+00],
				[  5.71099232e+00, 4.57415449e+00, 2.39395201e+00,
				   7.62788175e+00, -1.57322863e+00, -9.27756942e+00,
				  -1.29312369e+01, -1.14325201e+01, -1.07874533e+01,
				  -1.84956520e+01, -6.78393143e+00, -1.16073626e+00,
				  -7.77990973e+00, 5.71712697e-01, -1.58420805e+00,
				   4.38966989e+00, -7.00539172e+00],
				[  4.82584755e+00, -1.15150265e+01, -7.84711569e+00,
				  -9.68582420e+00, -1.24092351e+00, -1.99928895e-01,
				  -2.70652325e+01, 3.00382490e+00, 3.86305439e+00,
				   3.63582022e+00, -2.59288062e+00, -1.27482012e+00,
				  -1.37135178e+01, 1.25408836e-01, -2.43355568e-01,
				  -2.09130128e+01, -2.79301945e+00],
				[  6.95764589e+00, 5.59787771e+00, 1.64708936e-01,
				  -1.31793974e+01, -2.02549916e+00, -1.64046115e+00,
				  -1.20796511e+01, 3.89221150e+00, -7.59058140e+00,
				  -1.55556189e+01, -6.11843107e+00, -1.63266542e+00,
				  -5.06506845e-01, -2.29986435e+01, -1.37337918e+00,
				  -2.36549743e+01, -2.63441053e+00],
				[  9.81880410e-01, -2.36271959e+01, 4.85745937e+00,
				   5.58265928e+00, -1.65575400e+00, 1.45875453e+00,
				  -1.69510747e+01, 4.55309073e+00, -8.90987681e+00,
				  -1.02352858e+01, -5.02138067e+00, -1.37098960e+00,
				  -9.30148096e+00, 3.45655036e+00, -1.73755571e+00,
				  -1.08526217e+01, -7.74312218e+00],
				[ -4.10512951e+00, -1.12912755e+00, -8.05462576e+00,
				  -1.12599236e+01, -2.20392061e+00, -3.36925394e+00,
				   2.72299718e+00, -2.20071223e+01, -8.66290961e-01,
				  -5.48985762e+00, -4.52980441e+00, -1.79206400e+00,
				  -1.18284508e+01, 1.26933688e+00, -2.15300731e+00,
				  -5.41747128e+00, -1.58602126e+00],
				[ -3.03055343e+00, -8.35882063e-01, -3.78646355e+00,
				  -1.09729725e+01, -2.01307028e+00, 3.57028348e+00,
				   3.74513461e-02, -1.22652503e+01, -1.35413809e+01,
				  -2.62749862e+01, -7.46580729e+00, -1.85413395e+00,
				   4.83817245e+00, -1.91806464e+01, -1.82659417e+00,
				  -1.43247660e+01, -3.14176509e+00],
				[ -1.03649009e+01, -1.86555184e+01, 4.16904606e+00,
				  -2.26159799e-01, -1.85142696e+00, -3.48007754e-01,
				   4.00308202e+00, -2.10803376e+01, -6.81308455e+00,
				  -1.49062246e+01, -4.26919471e+00, -1.41774126e+00,
				   3.66274323e+00, 2.17429804e+00, -1.13966148e+00,
				  -1.85741097e+01, -6.62538394e+00],
				[ -6.24564651e+00, -7.20881945e-01, -2.42173609e+01,
				   8.19088851e+00, -2.28995272e+00, -5.12018653e-01,
				   4.38219177e+00, -3.18115773e+00, -9.89415098e+00,
				  -9.86960777e+00, -8.85105049e+00, -1.91653927e+00,
				   2.78120245e-01, -5.84025517e+00, -1.73600589e+00,
				  -1.82199753e+01, -2.47117655e+00],
				[ -1.90784968e+00, -2.00414110e+00, -1.96186114e+00,
				  -1.95856970e+00, -1.99853270e+00, -2.03998579e+00,
				  -1.88162563e+00, -1.76335062e+00, -2.18648675e+00,
				  -2.03583127e+00, -1.87178147e+00, -1.60387280e+00,
				  -2.00326574e+00, -1.89523979e+00, -2.02161015e+00,
				  -2.06242701e+00, -6.03149555e+00],
				[ -2.68988747e+00, -2.53491933e-02, 9.00257742e-01,
				   1.59486787e+00, -1.70719448e+00, -3.08035706e+00,
				   1.40070820e+00, -1.75599645e+00, -1.64441527e+00,
				  -6.43955391e-01, 1.29208991e+01, -1.49816193e+00,
				  -2.45080116e+00, -1.22843367e+00, 5.68072984e+00,
				  -1.42245431e+00, -6.68296632e+00],
				[ -1.07401789e+01, 2.65837986e+00, -1.43021179e+01,
				  -1.20843292e+01, -3.10832270e+00, -2.16530155e+01,
				  -1.22325231e+00, -1.49911345e+01, -2.79457724e+00,
				  -4.75687499e+00, -5.51583163e+00, -1.93441970e+00,
				  -1.27948887e+00, -5.21340599e+00, -3.97130746e+00,
				  -1.79008802e+01, -1.93190136e-02],
				[ -1.42028314e+01, -5.95390379e-01, -3.18677095e+01,
				  -2.58750972e+00, -2.04036965e+00, 2.33497897e+00,
				  -3.52441075e+00, -2.00483599e+01, -6.25423421e+00,
				  -3.04550338e-01, -3.23852326e+00, -1.91696042e+00,
				  -2.75229397e+01, 4.45417883e+00, -1.63420005e+00,
				  -8.97938450e+00, -2.69542021e+00],
				[ -9.48013168e+00, 3.03750746e+00, -2.51965896e+01,
				  -9.46931489e+00, -1.85158363e+00, 3.14976524e+00,
				  -1.98192712e+01, -1.94693358e+01, 3.87814097e+00,
				   8.77464806e-01, -2.19708274e+00, -1.66794457e+00,
				  -7.16121052e+00, -2.09989462e+01, -1.85417791e+00,
				  -1.35894702e+01, -1.75002525e+00],
				[ -1.51983766e+01, -2.13391697e+01, 5.46685899e+00,
				  -3.08258575e+01, -1.83730434e+00, -6.95650566e+00,
				   2.77608147e+00, 3.25670047e+00, -1.40414261e+01,
				  -5.68193670e+00, -3.96688260e+00, -1.49026835e+00,
				  -1.72253761e+01, 3.36339954e+00, -1.94808844e+00,
				   4.01005806e+00, -7.16857512e+00],
				[ -1.63146302e+01, 2.90758149e+00, -1.83785992e+01,
				  -2.10673410e+00, -9.47149217e-01, -2.12746422e+01,
				  -4.84319274e+00, 4.90767102e+00, -1.23922993e+00,
				  -1.06734148e+00, -1.44778257e+00, -1.03919966e+00,
				  -1.81495556e+01, 3.86998864e+00, -1.17672015e+00,
				   5.29093035e+00, -8.26577688e+00],
				[ -4.58123565e+00, -1.47640042e+01, -2.27874673e+01,
				  -9.97453535e+00, -1.53943117e+00, -3.17077882e+01,
				   3.07862331e+00, 5.27155126e+00, 2.82286744e+00,
				   5.24697791e-01, -1.61617187e+00, -1.40265862e+00,
				  -1.85991916e+01, -1.66780972e+01, -1.65121189e+00,
				  -3.85577865e+00, -2.62991401e+00],
				[ -1.89382849e+00, -2.21606782e+00, -2.25196829e+00,
				  -2.05441077e+00, -2.12567889e+00, -2.39559650e+00,
				  -2.03696171e+00, -2.11782691e+00, -2.18085534e+00,
				  -2.24656869e+00, -2.09005476e+00, -1.67306356e+00,
				  -2.17554485e+00, -2.28473109e+00, -2.09023797e+00,
				  -2.31933898e+00, -5.99873201e+00],
				[ -2.15571154e+00, -1.20214598e+01, -6.27547539e+00,
				   1.90600964e+00, -2.04476902e+00, -2.78817752e+01,
				  -1.04944953e+01, -4.91789795e+00, 3.56917751e+00,
				   4.54171085e+00, -5.55890395e+00, -1.58859563e+00,
				  -1.68680244e+01, 2.10365878e+00, -2.15643317e+00,
				   5.73513955e-02, -3.77489732e+00],
				[  1.76476185e+00, -2.08730872e+01, -1.69893900e+01,
				  -1.26772079e+01, -2.19625366e+00, -2.16702111e+01,
				   2.00955322e+00, -1.02750393e+01, -2.20276447e+00,
				  -8.81087954e+00, -5.60065264e+00, -1.85119025e+00,
				  -1.40752809e+01, -3.73208595e+00, -2.09773984e+00,
				   9.19964564e+00, -1.95379100e+00]])]
	
	
	
	def getWeights(self, initial=False, best=True):
		# 6 features
		# 12 outputs
		# 20 hidden layers
		# Learning rate: 0.05
		# Momentum: 0.1
		
		# Testing error: 9.973816
		# Training error: 3.018302
		# Epochs: 247500
		
		# Testing score: 88.10 %
		# Training score: 98.50 %
		# Validating score: 90.77 %
		# Accuracy score: 70.83 %
		
		
		
		
		# Initial weights:
		if initial:
			return [np.array([[  1.94275535e+00,  -4.48771954e+00,   1.44591605e+01,  -1.83353731e+01,   4.14439961e+00,   4.94640574e+00,  -6.63135804e-01],
		       [ -3.08975392e+00,   3.52361778e+00,   1.12590780e+00,  -8.34642790e+00,   9.94807296e+00,  -1.09870044e+00,  -7.19630709e-01],
		       [ -3.52007158e+00,  -8.78013729e+00,   1.60949420e+01,  -1.86416121e+01,   9.02333575e+00,   8.44489631e+00,  -4.56354486e-01],
		       [  4.50563019e+00,  -5.59981097e+00,  -1.11107938e+00,  -1.30175559e+00,   2.03276096e+00,   3.51130602e+00,  -6.44612499e-01],
		       [ -1.06866624e+01,  -1.85310731e+00,  -7.06767252e-01,   2.11320073e+00,   1.87226651e+00,   4.13448472e+00,   1.14037046e+00],
		       [ -2.81816710e+00,   1.97111443e+00,   1.22071803e+00,   4.76380131e+00,  -7.39127999e+00,   4.68082494e-01,   3.93130001e-01],
		       [  2.06012135e+00,   1.22746066e+00,   1.05220465e-01,  -2.20492106e+01,   1.38405201e+01,   8.43775748e+00,  -1.05722409e+00],
		       [ -1.65419892e+00,   1.13887609e+00,   2.22096435e-01,  -1.23847381e+00,  -2.41624900e+00,   3.76817827e+00,  -2.96081256e-02],
		       [  8.80448110e+00,   1.63266283e-01,   7.20371556e+00,  -1.06202419e+01,  -3.22025124e-01,  -7.51060461e+00,   7.65896914e-01],
		       [ -1.40922732e+01,   2.46846448e+01,   6.53083761e-01,  -1.31633655e+01,   1.58783027e+01,  -1.93910343e+00,  -2.90619092e+00],
		       [ -1.02762716e+01,   7.72032915e+00,  -4.30492245e+00,   5.59156286e+00,  -3.49042811e+00,   5.16267696e+00,  -9.18569499e-03],
		       [ -5.66017101e+00,  -3.55002070e+00,  -2.40665610e-01,   4.58894118e+00,   2.42072817e-01,   3.47957528e+00,   2.53847741e-01],
		       [  4.53283283e+00,  -6.24625271e+00,   3.52416317e+00,  -1.54748953e+01,   1.43911104e+01,   5.25707117e-01,  -2.76822709e-01],
		       [ -3.94198983e-01,   7.09714170e-01,   1.68391110e+00,  -8.10386572e-01,   1.18781080e-01,  -1.59543781e+00,  -4.46917748e-02],
		       [ -7.95337917e+00,   2.24504385e+00,  -1.41159609e+01,   9.65320604e+00,  -1.09598935e+01,   1.37261535e+01,   1.88371836e+00],
		       [  5.67904363e+00,   5.04170826e+00,  -9.68048339e+00,   3.33137642e+00,   3.71253643e+00,  -7.41085754e+00,  -8.03438361e-02],
		       [  2.04453579e+01,  -5.94390724e-01,   9.01018805e+00,  -3.12380110e+01,  -7.04299555e-01,  -2.98231531e+00,   1.49756355e+00],
		       [  2.52960326e+00,  -3.28118281e+00,  -1.00610025e+00,   2.62210259e+00,  -7.42515686e-01,  -1.49555462e-01,   9.42621401e-02],
		       [ -5.78807129e+00,   3.09206032e+00,  -1.63024315e+01,   8.10189205e+00,   8.31294896e+00,  -2.37228530e+00,   1.15811291e+00],
		       [ -8.67644629e+00,   1.70064997e+00,   3.79894191e+00,   3.65832610e-02,   1.59602413e+00,   2.90359216e+00,  -3.24913099e-01]]), 
			   np.array([[  4.94476706,   5.16164263,   3.63260249,  -3.06220831,  -3.23790996,  -6.52801598, -10.03647739,  -0.85634592,  -5.0326119 , -10.3537647 ,   6.2443775 ,  -6.04585586,   3.21005412,  -2.30748095,  10.34602853,  -6.26757922,   3.88319795,   1.086484  ,  -2.40679443,  -5.73817959, -11.34489966],
		       [ -3.12210612,   6.56635327,  11.75119457,  -3.86963874,  -8.56603441,  -4.9024078 ,   6.87693174,  -6.39555201,   7.80995827, -10.65223709, -11.4219511 ,  -4.07330897,   3.62628327,  -0.27601461,  -8.48621995,  -7.23646161, -14.18707067,  -6.62831487,  -4.5047404 ,  -9.04857288,  -0.15644641],
		       [  3.5523558 ,   1.66500086,  -9.07740015,  -3.03003066,  -2.2092553 ,  -7.85243466,  -0.71177951,  -6.25558937,  -3.91539065,  -2.88876839, -14.11578646,   3.59062775, -10.38860379,  -0.2671146 ,  -4.3141202 ,   1.34410173,  -3.23165652,  -4.11613272,   7.18932559,  -1.29990426,   2.09898304],
		       [  0.02399916, -12.62552157,   3.66504878,   7.54962238,   9.30669908,  -7.12258414,  -9.8329376 ,  -1.80996825,  -7.58930994,  -7.37754066,   4.24666858,   1.28454766,  -5.14952031,  -3.47778787,  -5.87097681,  -9.32677245,  -3.92562629, -12.27584925,  -6.1420822 ,  -4.65959389,   8.82457236],
		       [  1.71845801,  -1.13696708,  -9.40285813,  -4.20227645,  -9.20460107,  -3.99847175,  -7.93083019,   0.72179458,  -4.61192774,   6.88908494, -14.12609785,  -7.28949615,   5.19511861,  -0.09546833,  -8.08349794,  -6.55073632,  15.83523521,  -4.39261358,  -1.90742264,  -3.81422242,  -3.55511372],
		       [-12.50608156,   3.30466531,   3.3308886 ,  -1.55058198,   1.81155238,  -3.07694991,  -4.97480762,  -9.6576194 ,   6.66736853,   4.95848358,  -3.72945519,   4.22935352,   7.017729  ,  -2.28813737,  -1.86474403,   1.38275332,  -1.85309437,  -3.96410959,  -7.68492867,   2.60370331,  -8.53970646],
		       [ -4.52214808,  -2.02255687,   1.17169359,  10.31640433,  -1.70412579, -10.71503057, -11.00115011,   1.41053495,   3.67243004,  10.43032471,  -6.31381258,  -7.90753208,  -4.82406346,  -2.55218148,   7.3857748 ,  -0.67157228,  -4.66336646,  -1.07068407,  -3.60345116,  -0.69176139,  -2.0303409 ],
		       [  1.48925405,  -8.88234306,  -6.23985246,  -2.36962976,   4.56457454,  -0.04911692,  -8.26599644,  -2.26113297,  -4.63153649,   5.04293953,   4.79648727,   2.16204525, -10.36591461,  -1.56543142,   6.12045456,  11.90732406,  -7.48268783,  -3.99685365,  10.81119913,   1.88132603, -10.42285846],
		       [ -9.72652716,  -3.85255688,  -5.14056142,  -4.41720111,  -5.63185053,   0.26244855,   1.95831209,   0.94622297, -13.26131299, -10.13953184,  -4.60516718,  -6.88631482,  -5.75061926,  -2.44361803, -17.71555622,  -5.46658026,  -3.27829318,  -0.84941543,  -2.18629745,  -5.98450759,   7.85629056],
		       [  3.46696353,  -0.57516321,   8.18887976,  11.04829226,  -2.09314244,  -1.06396456,  -6.64930367,  -5.25670254,   1.3369223 ,  -6.93969804,   2.2305586 ,   4.9693846 ,  -0.52798492,  -1.10809493,  -7.01846302,   3.4995234 ,  -2.82506159,   2.84611319,   0.68016019,  -7.4535741 , -14.75422082],
		       [-11.68277964,  -9.07033723, -11.01763788,  -4.42343477,   3.95963048,   5.80195847,  13.91883614,  -5.90790763,  -4.4288797 ,  -9.29917754,  -2.14455031,  10.82436055, -13.11031231,  -1.31480161,   0.18031514,  -4.11808679,   0.03397454,   2.00660172,  -7.63583487,  10.16589733, -12.10995399],
		       [  3.17026441,  -6.88897933,  -6.20764596,  -3.45306085,  -4.64134281,   7.09948783,  -9.27909255,   0.29270625,   6.83234513,   7.05481567,   5.86392193,  -8.2602333 , -14.0897227 ,  -0.75578102,   9.95981483,  -2.51841251,   0.61959521,  -2.95608121,  -5.70581119,  -5.17077975,  -9.37362685]])]
		
		
		
		# Best weights:
		if best:
			return [np.array([[1.73521170e+00, -5.19216691e+00, 1.53239076e+01, -1.84002767e+01, 3.45816775e+00, 5.70603654e+00, -6.53448666e-01],
				[ -3.31621803e+00, 3.55899391e+00, 1.16623818e+00, -8.57392590e+00, 1.02423802e+01, -8.98492741e-01, -7.48695542e-01],
				[ -3.43008866e+00, -8.77027842e+00, 1.59120599e+01, -1.83238518e+01, 8.80206145e+00, 8.37859364e+00, -4.43140251e-01],
				[  4.50453354e+00, -5.46882263e+00, -1.18987649e+00, -1.44618586e+00, 2.24581893e+00, 3.49636797e+00, -6.70808555e-01],
				[ -1.06179698e+01, -1.76393218e+00, -5.63453816e-01, 2.25522467e+00, 1.98632962e+00, 4.20591723e+00, 9.83195273e-01],
				[ -2.66150395e+00, 1.50748671e+00, 1.15081534e+00, 5.12084511e+00, -7.69581070e+00, 6.01174163e-01, 4.40945625e-01],
				[  1.67905354e+00, 2.49861036e+00, 1.48699620e-02, -2.34692621e+01, 1.50332877e+01, 8.29841447e+00, -1.16550019e+00],
				[ -1.68283966e+00, 1.03477071e+00, 1.55221045e-01, -9.01699419e-01, -2.47012030e+00, 3.63134321e+00, -1.62197576e-02],
				[  8.96458521e+00, 2.55493213e-01, 7.05238251e+00, -1.06492080e+01, -1.90026295e-01, -7.79622980e+00, 7.86295534e-01],
				[ -1.43438026e+01, 2.47328910e+01, 6.67378626e-01, -1.33592771e+01, 1.62315292e+01, -1.78162615e+00, -2.93764192e+00],
				[ -1.05133836e+01, 7.84829356e+00, -4.41960068e+00, 5.77734334e+00, -3.57269648e+00, 5.27905514e+00, -8.20181421e-03],
				[ -5.49592496e+00, -3.67552372e+00, 9.91305565e-02, 4.18338478e+00, 1.34161897e-01, 3.71703095e+00, 2.28215855e-01],
				[  4.54856719e+00, -6.28934314e+00, 3.59946132e+00, -1.55238687e+01, 1.43620731e+01, 5.52577735e-01, -2.76023228e-01],
				[ -4.98543034e-01, 7.68665611e-01, 1.67489462e+00, -2.86611116e-01, -1.35227920e-01, -1.82108342e+00, -4.21197122e-02],
				[ -8.32978749e+00, 2.63368925e+00, -1.46403442e+01, 9.75633062e+00, -1.06998960e+01, 1.38769380e+01, 1.88327826e+00],
				[  5.45232244e+00, 5.27870358e+00, -9.76315297e+00, 3.39941425e+00, 3.65244168e+00, -7.33592091e+00, -8.29649022e-02],
				[  2.17121067e+01, -1.08780863e+00, 8.47287619e+00, -3.13986077e+01, -9.66220484e-01, -3.38241172e+00, 1.64421232e+00],
				[  2.21745251e+00, -3.28886205e+00, -1.04281336e+00, 2.91432340e+00, -1.01100278e+00, 1.40238281e-01, 1.05016051e-01],
				[ -5.71616249e+00, 3.32422638e+00, -1.67631171e+01, 8.10419341e+00, 8.60217144e+00, -2.55166434e+00, 1.16922940e+00],
				[ -8.75374864e+00, 1.56729385e+00, 3.99969396e+00, -3.11183452e-01, 1.81128256e+00, 3.14668157e+00, -3.50081776e-01]]), 
				np.array([[5.72493087e+00, 5.49060304e+00, 4.29635066e+00, -3.06947163e+00, -3.23794860e+00, -7.19182342e+00, -1.02199141e+01, -7.66198471e-01, -5.31382344e+00, -1.08113706e+01, 7.23572070e+00, -6.37591259e+00, 3.81972753e+00, -3.17857085e+00, 1.15498690e+01, -6.56646022e+00, 4.43852286e+00, 8.84547883e-01, -2.28257921e+00, -5.89285389e+00, -1.28831647e+01],
				[ -3.06140678e+00, 7.38490448e+00, 1.30257692e+01, -3.89698831e+00, -8.56627762e+00, -5.05729628e+00, 7.93660215e+00, -7.53796421e+00, 8.53210138e+00, -1.15900978e+01, -1.20138915e+01, -4.63119546e+00, 3.73467189e+00, 5.70085505e-01, -8.59606659e+00, -7.66149653e+00, -1.55827554e+01, -7.22940967e+00, -4.55989685e+00, -1.07001967e+01, -2.27786985e-01],
				[  3.34282323e+00, 1.76703582e+00, -9.73833597e+00, -3.05263638e+00, -2.20924665e+00, -8.62883325e+00, -7.69777189e-01, -7.18304356e+00, -3.97082734e+00, -3.34156047e+00, -1.53538803e+01, 3.63148490e+00, -1.20142129e+01, 4.48391121e-01, -4.55988912e+00, 1.66827966e+00, -3.23172612e+00, -4.71402513e+00, 7.78977328e+00, -1.53581294e+00, 2.33869267e+00],
				[  4.06686794e-01, -1.35599102e+01, 3.84390605e+00, 8.17715835e+00, 9.30519232e+00, -7.36453394e+00, -1.00491565e+01, -2.20962474e+00, -8.69414369e+00, -8.07876283e+00, 4.90490031e+00, 1.69713660e+00, -6.02203596e+00, -4.89284768e+00, -6.25895555e+00, -9.89425183e+00, -3.89376854e+00, -1.35995317e+01, -6.65025370e+00, -4.88445500e+00, 9.79745070e+00],
				[  1.63747159e+00, -1.36122224e+00, -1.01161022e+01, -4.20049106e+00, -9.20460107e+00, -4.37911552e+00, -9.62352995e+00, 1.15580023e+00, -5.05104910e+00, 7.27940704e+00, -1.48523839e+01, -7.63595644e+00, 5.98184470e+00, 1.83630646e-01, -8.19465608e+00, -6.40946603e+00, 1.72989077e+01, -4.44771041e+00, -1.90823497e+00, -4.03857875e+00, -4.03302546e+00],
				[ -1.42904512e+01, 3.54488299e+00, 3.92094008e+00, -1.59524282e+00, 1.81155207e+00, -3.22904660e+00, -5.64703923e+00, -1.03528211e+01, 6.48453810e+00, 5.04860269e+00, -4.19017761e+00, 4.79833062e+00, 7.83796697e+00, -2.78959216e+00, -1.86600119e+00, 1.44659657e+00, -1.95496565e+00, -4.43902299e+00, -8.36065949e+00, 2.97838450e+00, -9.16393364e+00],
				[ -4.77714666e+00, -1.56639783e+00, 1.19292347e+00, 1.07642138e+01, -1.70412581e+00, -1.18963045e+01, -1.10206619e+01, 2.06937654e+00, 4.36287790e+00, 1.17986123e+01, -6.95046078e+00, -7.84208092e+00, -5.28595982e+00, -4.06866746e+00, 7.95486220e+00, -8.70395770e-01, -4.87569700e+00, -1.19923580e+00, -4.12922021e+00, -4.90301929e-01, -2.39452268e+00],
				[  1.67664996e+00, -1.00423331e+01, -6.07563214e+00, -2.20485753e+00, 4.56456252e+00, -3.66951384e-01, -8.53328869e+00, -2.19270498e+00, -4.72430724e+00, 5.55818228e+00, 5.47132080e+00, 2.41998773e+00, -1.06175068e+01, -1.84887362e+00, 6.88405328e+00, 1.25580447e+01, -8.40656966e+00, -4.98741056e+00, 1.19121926e+01, 2.73418380e+00, -1.14210594e+01],
				[ -1.01466675e+01, -4.01419421e+00, -5.65156263e+00, -5.08952172e+00, -5.63673192e+00, 2.46846622e-01, 2.25902304e+00, 1.29197333e+00, -1.44727981e+01, -1.10617656e+01, -5.25671380e+00, -8.22073850e+00, -6.50306538e+00, -2.91099092e+00, -2.05796501e+01, -5.85992249e+00, -3.20940322e+00, -1.38569981e+00, -2.16324807e+00, -6.51827351e+00, 9.05836776e+00],
				[  3.25553997e+00, -1.10005396e+00, 9.14926007e+00, 1.17065925e+01, -2.10430728e+00, -8.21992550e-01, -6.64736094e+00, -6.28561216e+00, 1.45067735e+00, -7.00086858e+00, 2.92080721e+00, 5.36925444e+00, -7.90160567e-01, -1.72568110e+00, -7.04247309e+00, 3.66165848e+00, -2.82507440e+00, 3.45481249e+00, 6.77068115e-01, -8.11733804e+00, -1.52638539e+01],
				[ -1.23080404e+01, -1.06246430e+01, -1.11325614e+01, -4.98225002e+00, 3.95952114e+00, 7.16319973e+00, 1.56754483e+01, -6.56534931e+00, -5.08950529e+00, -9.88422800e+00, -2.53292746e+00, 1.24120679e+01, -1.37260202e+01, -1.47541201e+00, 6.15378453e-01, -4.10116278e+00, -1.45533855e-01, 1.72487042e+00, -8.15633289e+00, 1.12354719e+01, -1.37904204e+01],
				[  3.54670662e+00, -7.50752892e+00, -6.36631343e+00, -3.39381467e+00, -4.64134281e+00, 7.86806273e+00, -1.06608504e+01, 4.31849159e-03, 7.57836754e+00, 7.69403828e+00, 7.09915993e+00, -8.59828176e+00, -1.43742392e+01, -5.85363888e-01, 1.10039138e+01, -2.47805760e+00, 4.49122966e-01, -3.27669879e+00, -5.89958132e+00, -5.47870244e+00, -1.04608037e+01]])]
	
	
	def getWeights2(self):
		return [np.array([[ -1.09246465e-01, -1.17375138e-01, -5.32579077e+00,
			   1.67889928e+00, 2.18843291e+00, 6.02153940e+00,
			  -9.13276773e-01],
			[  6.58147263e+00, -7.99119305e+00, 7.62779796e+00,
			  -7.65509795e-01, 4.80712385e+00, -7.38241236e+00,
			  -5.57019525e-01],
			[  5.48543661e+00, 5.18604566e-01, 1.11809506e+00,
			  -2.50668892e+00, -2.13838853e+00, -1.83946821e+00,
			  -3.49339596e-03],
			[ -6.90629258e+00, 4.32083329e+00, -2.29783560e+00,
			   4.19711533e+00, -4.15553612e+00, 4.77247448e+00,
			   7.18220116e-03],
			[ -4.18297061e+00, 1.11087823e+00, -1.80482048e+00,
			   1.62164774e+01, -1.82176900e+01, 2.40864156e-01,
			   1.69019682e+00],
			[  7.60583611e+00, -9.16573632e+00, -1.47364433e+01,
			   2.86558760e+00, 4.05225390e+00, 3.44162877e+00,
			   1.47643448e+00],
			[  4.55831154e+00, -2.14537841e+00, -9.60976609e+00,
			   1.48866549e+01, -1.00003430e+01, -2.00079361e+00,
			   1.12492895e+00],
			[ -2.81784562e+00, -1.11459765e+01, 1.40617790e+01,
			  -2.58118351e+00, -7.39172466e+00, 7.28964153e+00,
			   7.64618859e-01],
			[ -1.35833027e+00, 2.47549378e+00, -1.45556196e+00,
			   1.50247285e+00, -2.78464728e+00, -4.52066868e+00,
			   1.54283958e+00],
			[  4.60648768e-01, 1.10592264e+01, -5.79310554e+00,
			  -8.09317575e+00, 1.03334667e+01, -7.31745885e+00,
			  -3.94751936e-01],
			[  2.96526357e+00, -2.35759483e+00, -1.47323448e+01,
			  -4.41300349e-01, -5.34758199e+00, 1.04705100e+01,
			   2.54786839e+00],
			[ -1.07833771e+01, -3.55275825e+00, 1.98351329e+00,
			   3.11351575e+00, 7.01476808e+00, -1.19828451e+00,
			   8.27714660e-01],
			[ -1.17632377e+00, 4.69592211e+00, -1.46006384e+01,
			   1.72075162e+01, 1.30206042e+00, -8.92265564e+00,
			   2.45883737e-01],
			[ -9.65409232e+00, 7.79030115e+00, 2.21768922e+00,
			  -3.51215596e+00, 1.43171333e+00, 4.66298419e+00,
			  -5.35011621e-01],
			[ -1.12088804e+00, -8.78387702e-01, -2.07597218e+00,
			   6.39821049e+00, -3.10180341e+00, 5.91090804e-01,
			   6.83635792e-02],
			[  7.37410643e-01, 7.93589372e+00, 3.11357150e+00,
			   3.84006827e-01, -4.75061331e+00, -3.49922980e+00,
			  -7.57547300e-01],
			[  5.99947588e+00, -2.99228718e+00, -4.11180487e-01,
			   5.50419515e+00, -7.87152362e+00, -2.61544238e+00,
			   3.76230939e-01],
			[  1.01432306e+01, -1.75541517e+00, 3.92571317e+00,
			  -2.10356430e+00, -1.46917539e+01, -2.37548437e+00,
			   1.83716949e+00],
			[  6.18982120e+00, -2.85378820e+00, -1.49384206e+00,
			   1.15298369e+00, -1.91568577e-01, -3.15153067e+00,
			   2.41810819e-01],
			[ -6.36744845e+00, -4.86227237e+00, -2.10854662e+00,
			   1.37824548e+01, 4.95799188e+00, -4.53363801e+00,
			  -6.61573035e-02]]), np.array([[ -1.46742677, 7.9998366 , -4.37937717, 0.45412305,
			  -5.82584245, -5.19990812, 1.16247028, -3.70695924,
			  -3.21975813, 8.00214992, 10.56777866, -2.43703044,
			   8.86164521, -0.3256955 , -1.25128489, -4.56481008,
			   2.81909437, -4.40841901, -0.45890117, -3.73811111,
			 -15.92272532],
			[ -4.61687644, -7.96250841, -9.53294555, -9.88545486,
			  -7.19405954, -7.09062757, -6.00865593, -11.86337395,
			   0.29697014, -2.4716072 , -5.69548557, -5.99104581,
			   2.45783837, -3.66939319, -0.27374928, -7.41746901,
			   2.90620136, -10.0920435 , -10.09089656, 12.41683928,
			   2.29248638],
			[ -3.0719974 , -7.26875626, 5.97687975, -11.76595481,
			  -7.56849875, -1.54966651, -9.10408374, -0.96127567,
			   2.09603516, 2.55983117, -7.33590995, -9.70933075,
			  -5.52529753, -5.74555571, -3.09754163, 14.42532105,
			   4.95698241, -3.83277847, -3.57516215, -5.35158555,
			  -0.89547449],
			[  4.6168678 , -5.79359673, -5.30060744, 5.41802818,
			  -4.89090224, -7.40202604, -7.18299527, -8.18861397,
			  -7.54157305, -10.07513372, -3.89517962, -3.24173873,
			   6.05662023, 2.60419637, -4.78984029, 9.37915505,
			  -3.20321376, -8.87708769, -3.25708071, -0.48684723,
			  -0.52108185],
			[ -3.04482656, -3.8580535 , -4.47872688, -9.0729594 ,
			  -9.27849858, 6.52450245, 5.77885329, 7.25360998,
			  -1.26175216, 3.31677367, -2.88084467, -4.82613593,
			  -3.73513978, -7.74409092, 7.48069129, -2.8991421 ,
			  -4.3681504 , 8.28365951, -5.34313932, -12.91067714,
			  -5.69081174],
			[  8.58532068, -2.05649164, -0.3755484 , -6.65571916,
			  -5.85978203, -6.51044923, 5.78132943, -7.90426277,
			  -0.76259294, -6.7787305 , -1.94632492, 11.63080355,
			  -5.7450616 , -5.21590397, -3.84134233, -9.56015462,
			  -3.00343925, -3.52916251, -3.82282257, -3.17049364,
			  -3.34163893],
			[ 11.33176527, 5.87366752, -9.80280081, 1.81796073,
			  -5.77200738, -4.46928015, 0.63638328, 0.64863262,
			  -7.39940317, -13.24584252, 6.53191339, -6.18644089,
			   0.22064197, -10.97265954, -0.32027658, -0.14418043,
			   6.69280729, 0.86437141, -2.11686454, -7.35664465,
			  -3.82913865],
			[ -6.27415305, -3.81373839, 9.15323602, 1.06581636,
			  -8.44668881, 8.50828728, -7.3091454 , 7.85860977,
			   1.18413202, -6.17645791, -1.55937826, -8.69034748,
			  -5.42639431, -3.2317268 , -10.04259714, -4.74581259,
			 -15.11533813, -4.92449944, -2.98773251, -4.54242602, -3.2968754 ],
			[ -2.4035725 , -8.41352508, -9.18783926, 1.56390867,
			 -10.86643286, 10.33846206, -7.61308448, -1.67283543,
			   1.92697553, 1.31642827, 10.86331383, -4.04319888,
			  -5.84477008, 0.37835611, -5.06484639, -2.86853058,
			  -6.78679563, -0.6733829 , -4.06816729, -5.50341824,
			  -0.97013831],
			[  6.99370889, -2.68052307, 0.08430837, 1.34876427,
			   4.07085488, -2.81505423, -0.29152508, 2.74937365,
			  -3.9230769 , 6.72793091, -0.91495912, 8.64836319,
			  -5.19987831, 2.75786734, -0.77109603, -2.56903965,
			  -1.07871792, -3.44996816, 8.87682213, -3.74915483,
			 -17.37210972],
			[ -7.14708178, 2.80125947, -0.61414378, -4.20585002,
			  16.61340685, -7.44371988, -5.0450297 , -10.37829692,
			   1.46514182, -8.07593892, -3.60764491, -5.36836967,
			 -12.46402339, 11.28659247, -0.47710872, -6.40132703,
			  -0.11225464, -1.82096713, 6.35292075, 2.33160582,
			 -11.43728799],
			[ -4.82062754, 7.79885717, -6.12556346, 3.14826334,
			  -1.74770719, -7.27888934, -12.03610162, -5.97656748,
			  -2.72726077, 3.53242736, -7.56093185, -5.32545224,
			   4.76069076, -0.34653709, 2.5886133 , -3.10542827,
			  -6.39915995, 11.98701475, -0.56072496, -6.1915427 ,
			  -9.91192485]])]